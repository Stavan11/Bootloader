
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eb4  080081d8  080081d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c08c  0800c08c  0000508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0cc  0800c0cc  0000602c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0cc  0800c0cc  000050cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0d4  0800c0d4  0000602c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0d4  0800c0d4  000050d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c0d8  0800c0d8  000050d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  0800c0dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000002c  0800c108  0000602c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  0800c108  000061cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2b1  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002508  00000000  00000000  0001430d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  00016818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000916  00000000  00000000  000173f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e157  00000000  00000000  00017d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef87  00000000  00000000  00035e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be103  00000000  00000000  00044dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102eef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fc8  00000000  00000000  00102f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00105efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d8 <__do_global_dtors_aux>:
 80081d8:	b510      	push	{r4, lr}
 80081da:	4c05      	ldr	r4, [pc, #20]	@ (80081f0 <__do_global_dtors_aux+0x18>)
 80081dc:	7823      	ldrb	r3, [r4, #0]
 80081de:	b933      	cbnz	r3, 80081ee <__do_global_dtors_aux+0x16>
 80081e0:	4b04      	ldr	r3, [pc, #16]	@ (80081f4 <__do_global_dtors_aux+0x1c>)
 80081e2:	b113      	cbz	r3, 80081ea <__do_global_dtors_aux+0x12>
 80081e4:	4804      	ldr	r0, [pc, #16]	@ (80081f8 <__do_global_dtors_aux+0x20>)
 80081e6:	f3af 8000 	nop.w
 80081ea:	2301      	movs	r3, #1
 80081ec:	7023      	strb	r3, [r4, #0]
 80081ee:	bd10      	pop	{r4, pc}
 80081f0:	2000002c 	.word	0x2000002c
 80081f4:	00000000 	.word	0x00000000
 80081f8:	0800c074 	.word	0x0800c074

080081fc <frame_dummy>:
 80081fc:	b508      	push	{r3, lr}
 80081fe:	4b03      	ldr	r3, [pc, #12]	@ (800820c <frame_dummy+0x10>)
 8008200:	b11b      	cbz	r3, 800820a <frame_dummy+0xe>
 8008202:	4903      	ldr	r1, [pc, #12]	@ (8008210 <frame_dummy+0x14>)
 8008204:	4803      	ldr	r0, [pc, #12]	@ (8008214 <frame_dummy+0x18>)
 8008206:	f3af 8000 	nop.w
 800820a:	bd08      	pop	{r3, pc}
 800820c:	00000000 	.word	0x00000000
 8008210:	20000030 	.word	0x20000030
 8008214:	0800c074 	.word	0x0800c074

08008218 <__aeabi_uldivmod>:
 8008218:	b953      	cbnz	r3, 8008230 <__aeabi_uldivmod+0x18>
 800821a:	b94a      	cbnz	r2, 8008230 <__aeabi_uldivmod+0x18>
 800821c:	2900      	cmp	r1, #0
 800821e:	bf08      	it	eq
 8008220:	2800      	cmpeq	r0, #0
 8008222:	bf1c      	itt	ne
 8008224:	f04f 31ff 	movne.w	r1, #4294967295
 8008228:	f04f 30ff 	movne.w	r0, #4294967295
 800822c:	f000 b96a 	b.w	8008504 <__aeabi_idiv0>
 8008230:	f1ad 0c08 	sub.w	ip, sp, #8
 8008234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008238:	f000 f806 	bl	8008248 <__udivmoddi4>
 800823c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008244:	b004      	add	sp, #16
 8008246:	4770      	bx	lr

08008248 <__udivmoddi4>:
 8008248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800824c:	9d08      	ldr	r5, [sp, #32]
 800824e:	460c      	mov	r4, r1
 8008250:	2b00      	cmp	r3, #0
 8008252:	d14e      	bne.n	80082f2 <__udivmoddi4+0xaa>
 8008254:	4694      	mov	ip, r2
 8008256:	458c      	cmp	ip, r1
 8008258:	4686      	mov	lr, r0
 800825a:	fab2 f282 	clz	r2, r2
 800825e:	d962      	bls.n	8008326 <__udivmoddi4+0xde>
 8008260:	b14a      	cbz	r2, 8008276 <__udivmoddi4+0x2e>
 8008262:	f1c2 0320 	rsb	r3, r2, #32
 8008266:	4091      	lsls	r1, r2
 8008268:	fa20 f303 	lsr.w	r3, r0, r3
 800826c:	fa0c fc02 	lsl.w	ip, ip, r2
 8008270:	4319      	orrs	r1, r3
 8008272:	fa00 fe02 	lsl.w	lr, r0, r2
 8008276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800827a:	fa1f f68c 	uxth.w	r6, ip
 800827e:	fbb1 f4f7 	udiv	r4, r1, r7
 8008282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008286:	fb07 1114 	mls	r1, r7, r4, r1
 800828a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800828e:	fb04 f106 	mul.w	r1, r4, r6
 8008292:	4299      	cmp	r1, r3
 8008294:	d90a      	bls.n	80082ac <__udivmoddi4+0x64>
 8008296:	eb1c 0303 	adds.w	r3, ip, r3
 800829a:	f104 30ff 	add.w	r0, r4, #4294967295
 800829e:	f080 8112 	bcs.w	80084c6 <__udivmoddi4+0x27e>
 80082a2:	4299      	cmp	r1, r3
 80082a4:	f240 810f 	bls.w	80084c6 <__udivmoddi4+0x27e>
 80082a8:	3c02      	subs	r4, #2
 80082aa:	4463      	add	r3, ip
 80082ac:	1a59      	subs	r1, r3, r1
 80082ae:	fa1f f38e 	uxth.w	r3, lr
 80082b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80082b6:	fb07 1110 	mls	r1, r7, r0, r1
 80082ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80082be:	fb00 f606 	mul.w	r6, r0, r6
 80082c2:	429e      	cmp	r6, r3
 80082c4:	d90a      	bls.n	80082dc <__udivmoddi4+0x94>
 80082c6:	eb1c 0303 	adds.w	r3, ip, r3
 80082ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80082ce:	f080 80fc 	bcs.w	80084ca <__udivmoddi4+0x282>
 80082d2:	429e      	cmp	r6, r3
 80082d4:	f240 80f9 	bls.w	80084ca <__udivmoddi4+0x282>
 80082d8:	4463      	add	r3, ip
 80082da:	3802      	subs	r0, #2
 80082dc:	1b9b      	subs	r3, r3, r6
 80082de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80082e2:	2100      	movs	r1, #0
 80082e4:	b11d      	cbz	r5, 80082ee <__udivmoddi4+0xa6>
 80082e6:	40d3      	lsrs	r3, r2
 80082e8:	2200      	movs	r2, #0
 80082ea:	e9c5 3200 	strd	r3, r2, [r5]
 80082ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f2:	428b      	cmp	r3, r1
 80082f4:	d905      	bls.n	8008302 <__udivmoddi4+0xba>
 80082f6:	b10d      	cbz	r5, 80082fc <__udivmoddi4+0xb4>
 80082f8:	e9c5 0100 	strd	r0, r1, [r5]
 80082fc:	2100      	movs	r1, #0
 80082fe:	4608      	mov	r0, r1
 8008300:	e7f5      	b.n	80082ee <__udivmoddi4+0xa6>
 8008302:	fab3 f183 	clz	r1, r3
 8008306:	2900      	cmp	r1, #0
 8008308:	d146      	bne.n	8008398 <__udivmoddi4+0x150>
 800830a:	42a3      	cmp	r3, r4
 800830c:	d302      	bcc.n	8008314 <__udivmoddi4+0xcc>
 800830e:	4290      	cmp	r0, r2
 8008310:	f0c0 80f0 	bcc.w	80084f4 <__udivmoddi4+0x2ac>
 8008314:	1a86      	subs	r6, r0, r2
 8008316:	eb64 0303 	sbc.w	r3, r4, r3
 800831a:	2001      	movs	r0, #1
 800831c:	2d00      	cmp	r5, #0
 800831e:	d0e6      	beq.n	80082ee <__udivmoddi4+0xa6>
 8008320:	e9c5 6300 	strd	r6, r3, [r5]
 8008324:	e7e3      	b.n	80082ee <__udivmoddi4+0xa6>
 8008326:	2a00      	cmp	r2, #0
 8008328:	f040 8090 	bne.w	800844c <__udivmoddi4+0x204>
 800832c:	eba1 040c 	sub.w	r4, r1, ip
 8008330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008334:	fa1f f78c 	uxth.w	r7, ip
 8008338:	2101      	movs	r1, #1
 800833a:	fbb4 f6f8 	udiv	r6, r4, r8
 800833e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008342:	fb08 4416 	mls	r4, r8, r6, r4
 8008346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800834a:	fb07 f006 	mul.w	r0, r7, r6
 800834e:	4298      	cmp	r0, r3
 8008350:	d908      	bls.n	8008364 <__udivmoddi4+0x11c>
 8008352:	eb1c 0303 	adds.w	r3, ip, r3
 8008356:	f106 34ff 	add.w	r4, r6, #4294967295
 800835a:	d202      	bcs.n	8008362 <__udivmoddi4+0x11a>
 800835c:	4298      	cmp	r0, r3
 800835e:	f200 80cd 	bhi.w	80084fc <__udivmoddi4+0x2b4>
 8008362:	4626      	mov	r6, r4
 8008364:	1a1c      	subs	r4, r3, r0
 8008366:	fa1f f38e 	uxth.w	r3, lr
 800836a:	fbb4 f0f8 	udiv	r0, r4, r8
 800836e:	fb08 4410 	mls	r4, r8, r0, r4
 8008372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008376:	fb00 f707 	mul.w	r7, r0, r7
 800837a:	429f      	cmp	r7, r3
 800837c:	d908      	bls.n	8008390 <__udivmoddi4+0x148>
 800837e:	eb1c 0303 	adds.w	r3, ip, r3
 8008382:	f100 34ff 	add.w	r4, r0, #4294967295
 8008386:	d202      	bcs.n	800838e <__udivmoddi4+0x146>
 8008388:	429f      	cmp	r7, r3
 800838a:	f200 80b0 	bhi.w	80084ee <__udivmoddi4+0x2a6>
 800838e:	4620      	mov	r0, r4
 8008390:	1bdb      	subs	r3, r3, r7
 8008392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008396:	e7a5      	b.n	80082e4 <__udivmoddi4+0x9c>
 8008398:	f1c1 0620 	rsb	r6, r1, #32
 800839c:	408b      	lsls	r3, r1
 800839e:	fa22 f706 	lsr.w	r7, r2, r6
 80083a2:	431f      	orrs	r7, r3
 80083a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80083a8:	fa04 f301 	lsl.w	r3, r4, r1
 80083ac:	ea43 030c 	orr.w	r3, r3, ip
 80083b0:	40f4      	lsrs	r4, r6
 80083b2:	fa00 f801 	lsl.w	r8, r0, r1
 80083b6:	0c38      	lsrs	r0, r7, #16
 80083b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80083bc:	fbb4 fef0 	udiv	lr, r4, r0
 80083c0:	fa1f fc87 	uxth.w	ip, r7
 80083c4:	fb00 441e 	mls	r4, r0, lr, r4
 80083c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80083cc:	fb0e f90c 	mul.w	r9, lr, ip
 80083d0:	45a1      	cmp	r9, r4
 80083d2:	fa02 f201 	lsl.w	r2, r2, r1
 80083d6:	d90a      	bls.n	80083ee <__udivmoddi4+0x1a6>
 80083d8:	193c      	adds	r4, r7, r4
 80083da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80083de:	f080 8084 	bcs.w	80084ea <__udivmoddi4+0x2a2>
 80083e2:	45a1      	cmp	r9, r4
 80083e4:	f240 8081 	bls.w	80084ea <__udivmoddi4+0x2a2>
 80083e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80083ec:	443c      	add	r4, r7
 80083ee:	eba4 0409 	sub.w	r4, r4, r9
 80083f2:	fa1f f983 	uxth.w	r9, r3
 80083f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80083fa:	fb00 4413 	mls	r4, r0, r3, r4
 80083fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008402:	fb03 fc0c 	mul.w	ip, r3, ip
 8008406:	45a4      	cmp	ip, r4
 8008408:	d907      	bls.n	800841a <__udivmoddi4+0x1d2>
 800840a:	193c      	adds	r4, r7, r4
 800840c:	f103 30ff 	add.w	r0, r3, #4294967295
 8008410:	d267      	bcs.n	80084e2 <__udivmoddi4+0x29a>
 8008412:	45a4      	cmp	ip, r4
 8008414:	d965      	bls.n	80084e2 <__udivmoddi4+0x29a>
 8008416:	3b02      	subs	r3, #2
 8008418:	443c      	add	r4, r7
 800841a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800841e:	fba0 9302 	umull	r9, r3, r0, r2
 8008422:	eba4 040c 	sub.w	r4, r4, ip
 8008426:	429c      	cmp	r4, r3
 8008428:	46ce      	mov	lr, r9
 800842a:	469c      	mov	ip, r3
 800842c:	d351      	bcc.n	80084d2 <__udivmoddi4+0x28a>
 800842e:	d04e      	beq.n	80084ce <__udivmoddi4+0x286>
 8008430:	b155      	cbz	r5, 8008448 <__udivmoddi4+0x200>
 8008432:	ebb8 030e 	subs.w	r3, r8, lr
 8008436:	eb64 040c 	sbc.w	r4, r4, ip
 800843a:	fa04 f606 	lsl.w	r6, r4, r6
 800843e:	40cb      	lsrs	r3, r1
 8008440:	431e      	orrs	r6, r3
 8008442:	40cc      	lsrs	r4, r1
 8008444:	e9c5 6400 	strd	r6, r4, [r5]
 8008448:	2100      	movs	r1, #0
 800844a:	e750      	b.n	80082ee <__udivmoddi4+0xa6>
 800844c:	f1c2 0320 	rsb	r3, r2, #32
 8008450:	fa20 f103 	lsr.w	r1, r0, r3
 8008454:	fa0c fc02 	lsl.w	ip, ip, r2
 8008458:	fa24 f303 	lsr.w	r3, r4, r3
 800845c:	4094      	lsls	r4, r2
 800845e:	430c      	orrs	r4, r1
 8008460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008464:	fa00 fe02 	lsl.w	lr, r0, r2
 8008468:	fa1f f78c 	uxth.w	r7, ip
 800846c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008470:	fb08 3110 	mls	r1, r8, r0, r3
 8008474:	0c23      	lsrs	r3, r4, #16
 8008476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800847a:	fb00 f107 	mul.w	r1, r0, r7
 800847e:	4299      	cmp	r1, r3
 8008480:	d908      	bls.n	8008494 <__udivmoddi4+0x24c>
 8008482:	eb1c 0303 	adds.w	r3, ip, r3
 8008486:	f100 36ff 	add.w	r6, r0, #4294967295
 800848a:	d22c      	bcs.n	80084e6 <__udivmoddi4+0x29e>
 800848c:	4299      	cmp	r1, r3
 800848e:	d92a      	bls.n	80084e6 <__udivmoddi4+0x29e>
 8008490:	3802      	subs	r0, #2
 8008492:	4463      	add	r3, ip
 8008494:	1a5b      	subs	r3, r3, r1
 8008496:	b2a4      	uxth	r4, r4
 8008498:	fbb3 f1f8 	udiv	r1, r3, r8
 800849c:	fb08 3311 	mls	r3, r8, r1, r3
 80084a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80084a4:	fb01 f307 	mul.w	r3, r1, r7
 80084a8:	42a3      	cmp	r3, r4
 80084aa:	d908      	bls.n	80084be <__udivmoddi4+0x276>
 80084ac:	eb1c 0404 	adds.w	r4, ip, r4
 80084b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80084b4:	d213      	bcs.n	80084de <__udivmoddi4+0x296>
 80084b6:	42a3      	cmp	r3, r4
 80084b8:	d911      	bls.n	80084de <__udivmoddi4+0x296>
 80084ba:	3902      	subs	r1, #2
 80084bc:	4464      	add	r4, ip
 80084be:	1ae4      	subs	r4, r4, r3
 80084c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80084c4:	e739      	b.n	800833a <__udivmoddi4+0xf2>
 80084c6:	4604      	mov	r4, r0
 80084c8:	e6f0      	b.n	80082ac <__udivmoddi4+0x64>
 80084ca:	4608      	mov	r0, r1
 80084cc:	e706      	b.n	80082dc <__udivmoddi4+0x94>
 80084ce:	45c8      	cmp	r8, r9
 80084d0:	d2ae      	bcs.n	8008430 <__udivmoddi4+0x1e8>
 80084d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80084d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80084da:	3801      	subs	r0, #1
 80084dc:	e7a8      	b.n	8008430 <__udivmoddi4+0x1e8>
 80084de:	4631      	mov	r1, r6
 80084e0:	e7ed      	b.n	80084be <__udivmoddi4+0x276>
 80084e2:	4603      	mov	r3, r0
 80084e4:	e799      	b.n	800841a <__udivmoddi4+0x1d2>
 80084e6:	4630      	mov	r0, r6
 80084e8:	e7d4      	b.n	8008494 <__udivmoddi4+0x24c>
 80084ea:	46d6      	mov	lr, sl
 80084ec:	e77f      	b.n	80083ee <__udivmoddi4+0x1a6>
 80084ee:	4463      	add	r3, ip
 80084f0:	3802      	subs	r0, #2
 80084f2:	e74d      	b.n	8008390 <__udivmoddi4+0x148>
 80084f4:	4606      	mov	r6, r0
 80084f6:	4623      	mov	r3, r4
 80084f8:	4608      	mov	r0, r1
 80084fa:	e70f      	b.n	800831c <__udivmoddi4+0xd4>
 80084fc:	3e02      	subs	r6, #2
 80084fe:	4463      	add	r3, ip
 8008500:	e730      	b.n	8008364 <__udivmoddi4+0x11c>
 8008502:	bf00      	nop

08008504 <__aeabi_idiv0>:
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop

08008508 <bootloader_jump_to_user_app>:

    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}

void bootloader_jump_to_user_app()
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
  void (*app_reset_handler) (void);
  // printf_uart("BL_DEBUG_MSG: Jumping to user app\r\n");

  uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 800850e:	4b0f      	ldr	r3, [pc, #60]	@ (800854c <bootloader_jump_to_user_app+0x44>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	f383 8808 	msr	MSP, r3
}
 800851e:	bf00      	nop
  // printf_uart("BL_DEBUG_MSG: MSP value: %x\r\n", msp_value);

  __set_MSP(msp_value);

  app_reset_handler = (void (*)(void)) *(volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4);
 8008520:	4b0b      	ldr	r3, [pc, #44]	@ (8008550 <bootloader_jump_to_user_app+0x48>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	60bb      	str	r3, [r7, #8]
  // printf_uart("BL_DEBUG_MSG: App reset handler: %x\r\n", app_reset_handler);

  uint32_t current_tick = HAL_GetTick();
 8008526:	f000 fe21 	bl	800916c <HAL_GetTick>
 800852a:	6078      	str	r0, [r7, #4]
  while (HAL_GetTick() <= (current_tick+1000));
 800852c:	bf00      	nop
 800852e:	f000 fe1d 	bl	800916c <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800853a:	429a      	cmp	r2, r3
 800853c:	d9f7      	bls.n	800852e <bootloader_jump_to_user_app+0x26>
  app_reset_handler();
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	4798      	blx	r3

}
 8008542:	bf00      	nop
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	08008000 	.word	0x08008000
 8008550:	08008004 	.word	0x08008004

08008554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800855a:	f000 fda2 	bl	80090a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800855e:	f000 f81b 	bl	8008598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008562:	f000 f8d3 	bl	800870c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8008566:	f000 f885 	bl	8008674 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800856a:	f000 f861 	bl	8008630 <MX_CRC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
       uint32_t button_state = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 800856e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008572:	4808      	ldr	r0, [pc, #32]	@ (8008594 <main+0x40>)
 8008574:	f001 fd1c 	bl	8009fb0 <HAL_GPIO_ReadPin>
 8008578:	4603      	mov	r3, r0
 800857a:	607b      	str	r3, [r7, #4]

    if (button_state == GPIO_PIN_SET)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d102      	bne.n	8008588 <main+0x34>
    {
        // printf_uart("Button is pressed.......Going to BL mode\r\n");
        bootloader_jump_to_user_app();
 8008582:	f7ff ffc1 	bl	8008508 <bootloader_jump_to_user_app>
 8008586:	e002      	b.n	800858e <main+0x3a>
    }
    else
    {
        // printf_uart("Button is not pressed.......Executing user app\r\n");
        bootloader_uart_read_data();
 8008588:	f000 f934 	bl	80087f4 <bootloader_uart_read_data>
    }

  while (1)
 800858c:	bf00      	nop
 800858e:	bf00      	nop
 8008590:	e7fd      	b.n	800858e <main+0x3a>
 8008592:	bf00      	nop
 8008594:	48000800 	.word	0x48000800

08008598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b094      	sub	sp, #80	@ 0x50
 800859c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800859e:	f107 0318 	add.w	r3, r7, #24
 80085a2:	2238      	movs	r2, #56	@ 0x38
 80085a4:	2100      	movs	r1, #0
 80085a6:	4618      	mov	r0, r3
 80085a8:	f003 fd38 	bl	800c01c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80085ac:	1d3b      	adds	r3, r7, #4
 80085ae:	2200      	movs	r2, #0
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	605a      	str	r2, [r3, #4]
 80085b4:	609a      	str	r2, [r3, #8]
 80085b6:	60da      	str	r2, [r3, #12]
 80085b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80085ba:	2000      	movs	r0, #0
 80085bc:	f001 fd4c 	bl	800a058 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80085c0:	2302      	movs	r3, #2
 80085c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80085c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80085ca:	2340      	movs	r3, #64	@ 0x40
 80085cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085ce:	2302      	movs	r3, #2
 80085d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80085d2:	2302      	movs	r3, #2
 80085d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80085d6:	2304      	movs	r3, #4
 80085d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80085da:	2355      	movs	r3, #85	@ 0x55
 80085dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80085de:	2302      	movs	r3, #2
 80085e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80085e2:	2302      	movs	r3, #2
 80085e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80085e6:	2302      	movs	r3, #2
 80085e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085ea:	f107 0318 	add.w	r3, r7, #24
 80085ee:	4618      	mov	r0, r3
 80085f0:	f001 fde6 	bl	800a1c0 <HAL_RCC_OscConfig>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80085fa:	f000 f8f5 	bl	80087e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085fe:	230f      	movs	r3, #15
 8008600:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008602:	2303      	movs	r3, #3
 8008604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008606:	2300      	movs	r3, #0
 8008608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800860a:	2300      	movs	r3, #0
 800860c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800860e:	2300      	movs	r3, #0
 8008610:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008612:	1d3b      	adds	r3, r7, #4
 8008614:	2104      	movs	r1, #4
 8008616:	4618      	mov	r0, r3
 8008618:	f002 f8e4 	bl	800a7e4 <HAL_RCC_ClockConfig>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8008622:	f000 f8e1 	bl	80087e8 <Error_Handler>
  }
}
 8008626:	bf00      	nop
 8008628:	3750      	adds	r7, #80	@ 0x50
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008634:	4b0d      	ldr	r3, [pc, #52]	@ (800866c <MX_CRC_Init+0x3c>)
 8008636:	4a0e      	ldr	r2, [pc, #56]	@ (8008670 <MX_CRC_Init+0x40>)
 8008638:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800863a:	4b0c      	ldr	r3, [pc, #48]	@ (800866c <MX_CRC_Init+0x3c>)
 800863c:	2200      	movs	r2, #0
 800863e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008640:	4b0a      	ldr	r3, [pc, #40]	@ (800866c <MX_CRC_Init+0x3c>)
 8008642:	2200      	movs	r2, #0
 8008644:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8008646:	4b09      	ldr	r3, [pc, #36]	@ (800866c <MX_CRC_Init+0x3c>)
 8008648:	2200      	movs	r2, #0
 800864a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800864c:	4b07      	ldr	r3, [pc, #28]	@ (800866c <MX_CRC_Init+0x3c>)
 800864e:	2200      	movs	r2, #0
 8008650:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008652:	4b06      	ldr	r3, [pc, #24]	@ (800866c <MX_CRC_Init+0x3c>)
 8008654:	2201      	movs	r2, #1
 8008656:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008658:	4804      	ldr	r0, [pc, #16]	@ (800866c <MX_CRC_Init+0x3c>)
 800865a:	f000 fea3 	bl	80093a4 <HAL_CRC_Init>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8008664:	f000 f8c0 	bl	80087e8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8008668:	bf00      	nop
 800866a:	bd80      	pop	{r7, pc}
 800866c:	20000110 	.word	0x20000110
 8008670:	40023000 	.word	0x40023000

08008674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008678:	4b22      	ldr	r3, [pc, #136]	@ (8008704 <MX_USART2_UART_Init+0x90>)
 800867a:	4a23      	ldr	r2, [pc, #140]	@ (8008708 <MX_USART2_UART_Init+0x94>)
 800867c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800867e:	4b21      	ldr	r3, [pc, #132]	@ (8008704 <MX_USART2_UART_Init+0x90>)
 8008680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008686:	4b1f      	ldr	r3, [pc, #124]	@ (8008704 <MX_USART2_UART_Init+0x90>)
 8008688:	2200      	movs	r2, #0
 800868a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800868c:	4b1d      	ldr	r3, [pc, #116]	@ (8008704 <MX_USART2_UART_Init+0x90>)
 800868e:	2200      	movs	r2, #0
 8008690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008692:	4b1c      	ldr	r3, [pc, #112]	@ (8008704 <MX_USART2_UART_Init+0x90>)
 8008694:	2200      	movs	r2, #0
 8008696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008698:	4b1a      	ldr	r3, [pc, #104]	@ (8008704 <MX_USART2_UART_Init+0x90>)
 800869a:	220c      	movs	r2, #12
 800869c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800869e:	4b19      	ldr	r3, [pc, #100]	@ (8008704 <MX_USART2_UART_Init+0x90>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80086a4:	4b17      	ldr	r3, [pc, #92]	@ (8008704 <MX_USART2_UART_Init+0x90>)
 80086a6:	2200      	movs	r2, #0
 80086a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80086aa:	4b16      	ldr	r3, [pc, #88]	@ (8008704 <MX_USART2_UART_Init+0x90>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80086b0:	4b14      	ldr	r3, [pc, #80]	@ (8008704 <MX_USART2_UART_Init+0x90>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80086b6:	4b13      	ldr	r3, [pc, #76]	@ (8008704 <MX_USART2_UART_Init+0x90>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80086bc:	4811      	ldr	r0, [pc, #68]	@ (8008704 <MX_USART2_UART_Init+0x90>)
 80086be:	f002 fce9 	bl	800b094 <HAL_UART_Init>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80086c8:	f000 f88e 	bl	80087e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80086cc:	2100      	movs	r1, #0
 80086ce:	480d      	ldr	r0, [pc, #52]	@ (8008704 <MX_USART2_UART_Init+0x90>)
 80086d0:	f003 fbda 	bl	800be88 <HAL_UARTEx_SetTxFifoThreshold>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80086da:	f000 f885 	bl	80087e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80086de:	2100      	movs	r1, #0
 80086e0:	4808      	ldr	r0, [pc, #32]	@ (8008704 <MX_USART2_UART_Init+0x90>)
 80086e2:	f003 fc0f 	bl	800bf04 <HAL_UARTEx_SetRxFifoThreshold>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80086ec:	f000 f87c 	bl	80087e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80086f0:	4804      	ldr	r0, [pc, #16]	@ (8008704 <MX_USART2_UART_Init+0x90>)
 80086f2:	f003 fb90 	bl	800be16 <HAL_UARTEx_DisableFifoMode>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80086fc:	f000 f874 	bl	80087e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008700:	bf00      	nop
 8008702:	bd80      	pop	{r7, pc}
 8008704:	20000134 	.word	0x20000134
 8008708:	40004400 	.word	0x40004400

0800870c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08a      	sub	sp, #40	@ 0x28
 8008710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008712:	f107 0314 	add.w	r3, r7, #20
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	605a      	str	r2, [r3, #4]
 800871c:	609a      	str	r2, [r3, #8]
 800871e:	60da      	str	r2, [r3, #12]
 8008720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008722:	4b2f      	ldr	r3, [pc, #188]	@ (80087e0 <MX_GPIO_Init+0xd4>)
 8008724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008726:	4a2e      	ldr	r2, [pc, #184]	@ (80087e0 <MX_GPIO_Init+0xd4>)
 8008728:	f043 0304 	orr.w	r3, r3, #4
 800872c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800872e:	4b2c      	ldr	r3, [pc, #176]	@ (80087e0 <MX_GPIO_Init+0xd4>)
 8008730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008732:	f003 0304 	and.w	r3, r3, #4
 8008736:	613b      	str	r3, [r7, #16]
 8008738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800873a:	4b29      	ldr	r3, [pc, #164]	@ (80087e0 <MX_GPIO_Init+0xd4>)
 800873c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800873e:	4a28      	ldr	r2, [pc, #160]	@ (80087e0 <MX_GPIO_Init+0xd4>)
 8008740:	f043 0320 	orr.w	r3, r3, #32
 8008744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008746:	4b26      	ldr	r3, [pc, #152]	@ (80087e0 <MX_GPIO_Init+0xd4>)
 8008748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008752:	4b23      	ldr	r3, [pc, #140]	@ (80087e0 <MX_GPIO_Init+0xd4>)
 8008754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008756:	4a22      	ldr	r2, [pc, #136]	@ (80087e0 <MX_GPIO_Init+0xd4>)
 8008758:	f043 0301 	orr.w	r3, r3, #1
 800875c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800875e:	4b20      	ldr	r3, [pc, #128]	@ (80087e0 <MX_GPIO_Init+0xd4>)
 8008760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	60bb      	str	r3, [r7, #8]
 8008768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800876a:	4b1d      	ldr	r3, [pc, #116]	@ (80087e0 <MX_GPIO_Init+0xd4>)
 800876c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800876e:	4a1c      	ldr	r2, [pc, #112]	@ (80087e0 <MX_GPIO_Init+0xd4>)
 8008770:	f043 0302 	orr.w	r3, r3, #2
 8008774:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008776:	4b1a      	ldr	r3, [pc, #104]	@ (80087e0 <MX_GPIO_Init+0xd4>)
 8008778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800877a:	f003 0302 	and.w	r3, r3, #2
 800877e:	607b      	str	r3, [r7, #4]
 8008780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008782:	2200      	movs	r2, #0
 8008784:	2120      	movs	r1, #32
 8008786:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800878a:	f001 fc29 	bl	8009fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800878e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008794:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8008798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800879a:	2300      	movs	r3, #0
 800879c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800879e:	f107 0314 	add.w	r3, r7, #20
 80087a2:	4619      	mov	r1, r3
 80087a4:	480f      	ldr	r0, [pc, #60]	@ (80087e4 <MX_GPIO_Init+0xd8>)
 80087a6:	f001 fa81 	bl	8009cac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80087aa:	2320      	movs	r3, #32
 80087ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087ae:	2301      	movs	r3, #1
 80087b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087b6:	2300      	movs	r3, #0
 80087b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80087ba:	f107 0314 	add.w	r3, r7, #20
 80087be:	4619      	mov	r1, r3
 80087c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80087c4:	f001 fa72 	bl	8009cac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80087c8:	2200      	movs	r2, #0
 80087ca:	2100      	movs	r1, #0
 80087cc:	2028      	movs	r0, #40	@ 0x28
 80087ce:	f000 fdb4 	bl	800933a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80087d2:	2028      	movs	r0, #40	@ 0x28
 80087d4:	f000 fdcb 	bl	800936e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80087d8:	bf00      	nop
 80087da:	3728      	adds	r7, #40	@ 0x28
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	40021000 	.word	0x40021000
 80087e4:	48000800 	.word	0x48000800

080087e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80087e8:	b480      	push	{r7}
 80087ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80087ec:	b672      	cpsid	i
}
 80087ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80087f0:	bf00      	nop
 80087f2:	e7fd      	b.n	80087f0 <Error_Handler+0x8>

080087f4 <bootloader_uart_read_data>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void  bootloader_uart_read_data(void)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
    uint8_t rcv_len=0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	70fb      	strb	r3, [r7, #3]

	while(1)
	{
		memset(bl_rx_buffer,0,200);
 80087fe:	22c8      	movs	r2, #200	@ 0xc8
 8008800:	2100      	movs	r1, #0
 8008802:	4825      	ldr	r0, [pc, #148]	@ (8008898 <bootloader_uart_read_data+0xa4>)
 8008804:	f003 fc0a 	bl	800c01c <memset>
		//here we will read and decode the commands coming from host
		//first read only one byte from the host , which is the "length" field of the command packet
    HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 8008808:	f04f 33ff 	mov.w	r3, #4294967295
 800880c:	2201      	movs	r2, #1
 800880e:	4922      	ldr	r1, [pc, #136]	@ (8008898 <bootloader_uart_read_data+0xa4>)
 8008810:	4822      	ldr	r0, [pc, #136]	@ (800889c <bootloader_uart_read_data+0xa8>)
 8008812:	f002 fd1d 	bl	800b250 <HAL_UART_Receive>
		rcv_len= bl_rx_buffer[0];
 8008816:	4b20      	ldr	r3, [pc, #128]	@ (8008898 <bootloader_uart_read_data+0xa4>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	70fb      	strb	r3, [r7, #3]
		HAL_UART_Receive(C_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 800881c:	78fb      	ldrb	r3, [r7, #3]
 800881e:	b29a      	uxth	r2, r3
 8008820:	f04f 33ff 	mov.w	r3, #4294967295
 8008824:	491e      	ldr	r1, [pc, #120]	@ (80088a0 <bootloader_uart_read_data+0xac>)
 8008826:	481d      	ldr	r0, [pc, #116]	@ (800889c <bootloader_uart_read_data+0xa8>)
 8008828:	f002 fd12 	bl	800b250 <HAL_UART_Receive>
    // printf_uart("BL_DEBUG_MSG:bootloader_uart_read_data \n");
    // printf_uart("BL_DEBUG_MSG: RX BUFFER: ");
    for(int i=0;i<rcv_len+1;i++)
 800882c:	2300      	movs	r3, #0
 800882e:	607b      	str	r3, [r7, #4]
 8008830:	e002      	b.n	8008838 <bootloader_uart_read_data+0x44>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	3301      	adds	r3, #1
 8008836:	607b      	str	r3, [r7, #4]
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	429a      	cmp	r2, r3
 800883e:	ddf8      	ble.n	8008832 <bootloader_uart_read_data+0x3e>
    {
        // printf_uart("%x ",bl_rx_buffer[i]);
    }
    // printf_uart("\r\n");
		switch(bl_rx_buffer[1])
 8008840:	4b15      	ldr	r3, [pc, #84]	@ (8008898 <bootloader_uart_read_data+0xa4>)
 8008842:	785b      	ldrb	r3, [r3, #1]
 8008844:	3b51      	subs	r3, #81	@ 0x51
 8008846:	2b06      	cmp	r3, #6
 8008848:	d8d9      	bhi.n	80087fe <bootloader_uart_read_data+0xa>
 800884a:	a201      	add	r2, pc, #4	@ (adr r2, 8008850 <bootloader_uart_read_data+0x5c>)
 800884c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008850:	0800886d 	.word	0x0800886d
 8008854:	080087ff 	.word	0x080087ff
 8008858:	080087ff 	.word	0x080087ff
 800885c:	08008875 	.word	0x08008875
 8008860:	0800887d 	.word	0x0800887d
 8008864:	08008885 	.word	0x08008885
 8008868:	0800888d 	.word	0x0800888d
		{
            case BL_GET_VER:
                bootloader_handle_getver_cmd(bl_rx_buffer);
 800886c:	480a      	ldr	r0, [pc, #40]	@ (8008898 <bootloader_uart_read_data+0xa4>)
 800886e:	f000 f819 	bl	80088a4 <bootloader_handle_getver_cmd>
                break;
 8008872:	e010      	b.n	8008896 <bootloader_uart_read_data+0xa2>
//                break;
//            case BL_GET_CID:
//                bootloader_handle_getcid_cmd(bl_rx_buffer);
//                break;
           case BL_GET_RDP_STATUS:
               bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8008874:	4808      	ldr	r0, [pc, #32]	@ (8008898 <bootloader_uart_read_data+0xa4>)
 8008876:	f000 f8dd 	bl	8008a34 <bootloader_handle_getrdp_cmd>
               break;
 800887a:	e00c      	b.n	8008896 <bootloader_uart_read_data+0xa2>
           case BL_GO_TO_ADDR:
               bootloader_handle_go_cmd(bl_rx_buffer);
 800887c:	4806      	ldr	r0, [pc, #24]	@ (8008898 <bootloader_uart_read_data+0xa4>)
 800887e:	f000 fa5b 	bl	8008d38 <bootloader_handle_go_cmd>
               break;
 8008882:	e008      	b.n	8008896 <bootloader_uart_read_data+0xa2>
           case BL_FLASH_ERASE:
               bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8008884:	4804      	ldr	r0, [pc, #16]	@ (8008898 <bootloader_uart_read_data+0xa4>)
 8008886:	f000 f91d 	bl	8008ac4 <bootloader_handle_flash_erase_cmd>
               break;
 800888a:	e004      	b.n	8008896 <bootloader_uart_read_data+0xa2>
           case BL_MEM_WRITE:
               bootloader_handle_mem_write_cmd(bl_rx_buffer);
 800888c:	4802      	ldr	r0, [pc, #8]	@ (8008898 <bootloader_uart_read_data+0xa4>)
 800888e:	f000 f9a7 	bl	8008be0 <bootloader_handle_mem_write_cmd>
               break;
 8008892:	bf00      	nop
 8008894:	e7b3      	b.n	80087fe <bootloader_uart_read_data+0xa>
		memset(bl_rx_buffer,0,200);
 8008896:	e7b2      	b.n	80087fe <bootloader_uart_read_data+0xa>
 8008898:	20000048 	.word	0x20000048
 800889c:	20000134 	.word	0x20000134
 80088a0:	20000049 	.word	0x20000049

080088a4 <bootloader_handle_getver_cmd>:

}

/*Helper function to handle BL_GET_VER command */
void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]

    // 1) verify the checksum
    // printf_uart("BL_DEBUG_MSG:bootloader_handle_getver_cmd\n");

	 //Total length of the command packet
	  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	3301      	adds	r3, #1
 80088b2:	617b      	str	r3, [r7, #20]

	  //extract the CRC32 sent by the Host
	  uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) );
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	3b04      	subs	r3, #4
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	4413      	add	r3, r2
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	613b      	str	r3, [r7, #16]

    if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	3b04      	subs	r3, #4
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f863 	bl	8008994 <bootloader_verify_crc>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d110      	bne.n	80088f6 <bootloader_handle_getver_cmd+0x52>
    {
        // printf_uart("BL_DEBUG_MSG:checksum success !!\n");
        // checksum is correct..
        bootloader_send_ack(bl_rx_buffer[0],1);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2101      	movs	r1, #1
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 f82e 	bl	800893c <bootloader_send_ack>
        bl_version=get_bootloader_version();
 80088e0:	f000 f824 	bl	800892c <get_bootloader_version>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73fb      	strb	r3, [r7, #15]
       // // printf_uart("BL_DEBUG_MSG:BL_VER : %d %#x\n",bl_version,bl_version);
        bootloader_uart_write_data(&bl_version,1);
 80088e8:	f107 030f 	add.w	r3, r7, #15
 80088ec:	2101      	movs	r1, #1
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 f808 	bl	8008904 <bootloader_uart_write_data>
    {
       // printf_uart("BL_DEBUG_MSG:checksum fail !!\n");
       //checksum is wrong send nack
       bootloader_send_nack();
    }
}
 80088f4:	e001      	b.n	80088fa <bootloader_handle_getver_cmd+0x56>
       bootloader_send_nack();
 80088f6:	f000 f83b 	bl	8008970 <bootloader_send_nack>
}
 80088fa:	bf00      	nop
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <bootloader_uart_write_data>:

/* This function writes data in to C_UART */
void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
    /*you can replace the below ST's USART driver API call with your MCUs driver API call */
	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	b29a      	uxth	r2, r3
 8008912:	f04f 33ff 	mov.w	r3, #4294967295
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	4803      	ldr	r0, [pc, #12]	@ (8008928 <bootloader_uart_write_data+0x24>)
 800891a:	f002 fc0b 	bl	800b134 <HAL_UART_Transmit>

}
 800891e:	bf00      	nop
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20000134 	.word	0x20000134

0800892c <get_bootloader_version>:

uint8_t get_bootloader_version(void)
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
  return BL_VERSION;
 8008930:	2310      	movs	r3, #16
}
 8008932:	4618      	mov	r0, r3
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <bootloader_send_ack>:

/*This function sends ACK if CRC matches along with "len to follow"*/
void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	460a      	mov	r2, r1
 8008946:	71fb      	strb	r3, [r7, #7]
 8008948:	4613      	mov	r3, r2
 800894a:	71bb      	strb	r3, [r7, #6]
	 //here we send 2 byte.. first byte is ack and the second byte is len value
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 800894c:	23a5      	movs	r3, #165	@ 0xa5
 800894e:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8008950:	79bb      	ldrb	r3, [r7, #6]
 8008952:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
 8008954:	f107 010c 	add.w	r1, r7, #12
 8008958:	f04f 33ff 	mov.w	r3, #4294967295
 800895c:	2202      	movs	r2, #2
 800895e:	4803      	ldr	r0, [pc, #12]	@ (800896c <bootloader_send_ack+0x30>)
 8008960:	f002 fbe8 	bl	800b134 <HAL_UART_Transmit>

}
 8008964:	bf00      	nop
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	20000134 	.word	0x20000134

08008970 <bootloader_send_nack>:
/*This function sends NACK */
void bootloader_send_nack(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8008976:	237f      	movs	r3, #127	@ 0x7f
 8008978:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART,&nack,1,HAL_MAX_DELAY);
 800897a:	1df9      	adds	r1, r7, #7
 800897c:	f04f 33ff 	mov.w	r3, #4294967295
 8008980:	2201      	movs	r2, #1
 8008982:	4803      	ldr	r0, [pc, #12]	@ (8008990 <bootloader_send_nack+0x20>)
 8008984:	f002 fbd6 	bl	800b134 <HAL_UART_Transmit>
}
 8008988:	bf00      	nop
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20000134 	.word	0x20000134

08008994 <bootloader_verify_crc>:
uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
    uint32_t uwCRCValue = calculate_crc(pData, len);
 80089a0:	68b9      	ldr	r1, [r7, #8]
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f000 f80c 	bl	80089c0 <calculate_crc>
 80089a8:	6178      	str	r0, [r7, #20]

    if (uwCRCValue == crc_host)
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d101      	bne.n	80089b6 <bootloader_verify_crc+0x22>
    {
        return VERIFY_CRC_SUCCESS;
 80089b2:	2300      	movs	r3, #0
 80089b4:	e000      	b.n	80089b8 <bootloader_verify_crc+0x24>
    }
    return VERIFY_CRC_FAIL;
 80089b6:	2301      	movs	r3, #1
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <calculate_crc>:
uint32_t calculate_crc(uint8_t* pData, uint32_t len)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 80089ca:	f04f 33ff 	mov.w	r3, #4294967295
 80089ce:	617b      	str	r3, [r7, #20]

    for (uint32_t i = 0; i < len; i++)
 80089d0:	2300      	movs	r3, #0
 80089d2:	613b      	str	r3, [r7, #16]
 80089d4:	e020      	b.n	8008a18 <calculate_crc+0x58>
    {
        uint32_t data = pData[i];
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	4413      	add	r3, r2
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	60bb      	str	r3, [r7, #8]
        crc = crc ^ data;
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	4053      	eors	r3, r2
 80089e6:	617b      	str	r3, [r7, #20]
        for (uint32_t j = 0; j < 32; j++)
 80089e8:	2300      	movs	r3, #0
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	e00e      	b.n	8008a0c <calculate_crc+0x4c>
        {
            if (crc & 0x80000000)
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	da05      	bge.n	8008a00 <calculate_crc+0x40>
            {
                crc = (crc << 1) ^ 0x04C11DB7;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	005a      	lsls	r2, r3, #1
 80089f8:	4b0d      	ldr	r3, [pc, #52]	@ (8008a30 <calculate_crc+0x70>)
 80089fa:	4053      	eors	r3, r2
 80089fc:	617b      	str	r3, [r7, #20]
 80089fe:	e002      	b.n	8008a06 <calculate_crc+0x46>
            }
            else
            {
                crc = (crc << 1);
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	617b      	str	r3, [r7, #20]
        for (uint32_t j = 0; j < 32; j++)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2b1f      	cmp	r3, #31
 8008a10:	d9ed      	bls.n	80089ee <calculate_crc+0x2e>
    for (uint32_t i = 0; i < len; i++)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	3301      	adds	r3, #1
 8008a16:	613b      	str	r3, [r7, #16]
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d3da      	bcc.n	80089d6 <calculate_crc+0x16>
            }
        }
    }

    return crc;
 8008a20:	697b      	ldr	r3, [r7, #20]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	371c      	adds	r7, #28
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	04c11db7 	.word	0x04c11db7

08008a34 <bootloader_handle_getrdp_cmd>:

/*Helper function to handle BL_GET_RDP_STATUS command */
void bootloader_handle_getrdp_cmd(uint8_t *pBuffer)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
    uint8_t rdp_level = 0x00;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73fb      	strb	r3, [r7, #15]
   // printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8008a40:	4b15      	ldr	r3, [pc, #84]	@ (8008a98 <bootloader_handle_getrdp_cmd+0x64>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	3301      	adds	r3, #1
 8008a46:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	3b04      	subs	r3, #4
 8008a4c:	4a12      	ldr	r2, [pc, #72]	@ (8008a98 <bootloader_handle_getrdp_cmd+0x64>)
 8008a4e:	4413      	add	r3, r2
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	3b04      	subs	r3, #4
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	480e      	ldr	r0, [pc, #56]	@ (8008a98 <bootloader_handle_getrdp_cmd+0x64>)
 8008a5e:	f7ff ff99 	bl	8008994 <bootloader_verify_crc>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d110      	bne.n	8008a8a <bootloader_handle_getrdp_cmd+0x56>
	{
       // printmsg("BL_DEBUG_MSG:checksum success !!\n");
        bootloader_send_ack(pBuffer[0],1);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7ff ff64 	bl	800893c <bootloader_send_ack>
        rdp_level = get_flash_rdp_level();
 8008a74:	f000 f812 	bl	8008a9c <get_flash_rdp_level>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73fb      	strb	r3, [r7, #15]
       // printmsg("BL_DEBUG_MSG:RDP level: %d %#x\n",rdp_level,rdp_level);
        bootloader_uart_write_data(&rdp_level,1);
 8008a7c:	f107 030f 	add.w	r3, r7, #15
 8008a80:	2101      	movs	r1, #1
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7ff ff3e 	bl	8008904 <bootloader_uart_write_data>
       // printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8008a88:	e001      	b.n	8008a8e <bootloader_handle_getrdp_cmd+0x5a>
        bootloader_send_nack();
 8008a8a:	f7ff ff71 	bl	8008970 <bootloader_send_nack>
}
 8008a8e:	bf00      	nop
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	20000048 	.word	0x20000048

08008a9c <get_flash_rdp_level>:

/*This function reads the RDP ( Read protection option byte) value
 *For more info refer "Table 9. Description of the option bytes" in stm32f446xx RM
 */
uint8_t get_flash_rdp_level(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b08e      	sub	sp, #56	@ 0x38
 8008aa0:	af00      	add	r7, sp, #0

	uint8_t rdp_status=0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
 8008aa8:	463b      	mov	r3, r7
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 ff5c 	bl	8009968 <HAL_FLASHEx_OBGetConfig>
	rdp_status = (uint8_t)ob_handle.RDPLevel;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	return rdp_status;
 8008ab6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3738      	adds	r7, #56	@ 0x38
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <bootloader_handle_flash_erase_cmd>:

/*Helper function to handle BL_FLASH_ERASE command */
void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
    uint8_t erase_status = 0x00;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]
  
    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8008ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8008b50 <bootloader_handle_flash_erase_cmd+0x8c>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	3b04      	subs	r3, #4
 8008adc:	4a1c      	ldr	r2, [pc, #112]	@ (8008b50 <bootloader_handle_flash_erase_cmd+0x8c>)
 8008ade:	4413      	add	r3, r2
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	3b04      	subs	r3, #4
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	4619      	mov	r1, r3
 8008aec:	4818      	ldr	r0, [pc, #96]	@ (8008b50 <bootloader_handle_flash_erase_cmd+0x8c>)
 8008aee:	f7ff ff51 	bl	8008994 <bootloader_verify_crc>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d124      	bne.n	8008b42 <bootloader_handle_flash_erase_cmd+0x7e>
	{
       
        bootloader_send_ack(pBuffer[0],1);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2101      	movs	r1, #1
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7ff ff1c 	bl	800893c <bootloader_send_ack>
       
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8008b04:	2201      	movs	r2, #1
 8008b06:	2120      	movs	r1, #32
 8008b08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008b0c:	f001 fa68 	bl	8009fe0 <HAL_GPIO_WritePin>
        erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	3302      	adds	r3, #2
 8008b14:	781a      	ldrb	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	3303      	adds	r3, #3
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4610      	mov	r0, r2
 8008b20:	f000 f818 	bl	8008b54 <execute_flash_erase>
 8008b24:	4603      	mov	r3, r0
 8008b26:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8008b28:	2200      	movs	r2, #0
 8008b2a:	2120      	movs	r1, #32
 8008b2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008b30:	f001 fa56 	bl	8009fe0 <HAL_GPIO_WritePin>

        bootloader_uart_write_data(&erase_status,1);
 8008b34:	f107 030f 	add.w	r3, r7, #15
 8008b38:	2101      	movs	r1, #1
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff fee2 	bl	8008904 <bootloader_uart_write_data>

	}else
	{      
        bootloader_send_nack();
	}
}
 8008b40:	e001      	b.n	8008b46 <bootloader_handle_flash_erase_cmd+0x82>
        bootloader_send_nack();
 8008b42:	f7ff ff15 	bl	8008970 <bootloader_send_nack>
}
 8008b46:	bf00      	nop
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	20000048 	.word	0x20000048

08008b54 <execute_flash_erase>:

 uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b08e      	sub	sp, #56	@ 0x38
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	460a      	mov	r2, r1
 8008b5e:	71fb      	strb	r3, [r7, #7]
 8008b60:	4613      	mov	r3, r2
 8008b62:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;

	if( number_of_sector > 8 )
 8008b64:	79bb      	ldrb	r3, [r7, #6]
 8008b66:	2b08      	cmp	r3, #8
 8008b68:	d901      	bls.n	8008b6e <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 8008b6a:	2304      	movs	r3, #4
 8008b6c:	e033      	b.n	8008bd6 <execute_flash_erase+0x82>

if (sector_number == (uint8_t) 0xff) {
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	2bff      	cmp	r3, #255	@ 0xff
 8008b72:	d102      	bne.n	8008b7a <execute_flash_erase+0x26>
    flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8008b74:	2301      	movs	r3, #1
 8008b76:	613b      	str	r3, [r7, #16]
 8008b78:	e01a      	b.n	8008bb0 <execute_flash_erase+0x5c>
} else {
    /* Calculate the pages to erase based on the sector size and page size */
    uint32_t sector_size = 16 * 1024; // 16 KB sector size
 8008b7a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008b7e:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t page_size = 2 * 1024; // 2 KB page size
 8008b80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008b84:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t pages_per_sector = sector_size / page_size;
 8008b86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t initial_page = sector_number * pages_per_sector;
 8008b90:	79fa      	ldrb	r2, [r7, #7]
 8008b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b94:	fb02 f303 	mul.w	r3, r2, r3
 8008b98:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t number_of_pages = number_of_sector * pages_per_sector;
 8008b9a:	79ba      	ldrb	r2, [r7, #6]
 8008b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ba2:	627b      	str	r3, [r7, #36]	@ 0x24

    flashErase_handle.TypeErase = TYPEERASE_PAGES;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	613b      	str	r3, [r7, #16]
    flashErase_handle.Page = initial_page;
 8008ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008baa:	61bb      	str	r3, [r7, #24]
    flashErase_handle.NbPages = number_of_pages;
 8008bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bae:	61fb      	str	r3, [r7, #28]
}
flashErase_handle.Banks = FLASH_BANK_1;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	617b      	str	r3, [r7, #20]

/* Get access to touch the flash registers */
HAL_FLASH_Unlock();
 8008bb4:	f000 fd54 	bl	8009660 <HAL_FLASH_Unlock>
status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8008bb8:	f107 020c 	add.w	r2, r7, #12
 8008bbc:	f107 0310 	add.w	r3, r7, #16
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 fe36 	bl	8009834 <HAL_FLASHEx_Erase>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
HAL_FLASH_Lock();
 8008bce:	f000 fd69 	bl	80096a4 <HAL_FLASH_Lock>

return status;
 8008bd2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3738      	adds	r7, #56	@ 0x38
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
	...

08008be0 <bootloader_handle_mem_write_cmd>:

/*Helper function to handle BL_MEM_WRITE command */
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
	uint8_t addr_valid = ADDR_VALID;
 8008be8:	2300      	movs	r3, #0
 8008bea:	77fb      	strb	r3, [r7, #31]
	uint8_t write_status = 0x00;
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]
	uint8_t chksum =0, len=0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	77bb      	strb	r3, [r7, #30]
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	777b      	strb	r3, [r7, #29]
	len = pBuffer[0];
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	777b      	strb	r3, [r7, #29]
	uint8_t payload_len = pBuffer[6];
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	799b      	ldrb	r3, [r3, #6]
 8008c02:	773b      	strb	r3, [r7, #28]

	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008c0a:	61bb      	str	r3, [r7, #24]
	chksum = pBuffer[len];
 8008c0c:	7f7b      	ldrb	r3, [r7, #29]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	4413      	add	r3, r2
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	77bb      	strb	r3, [r7, #30]
    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8008c16:	4b25      	ldr	r3, [pc, #148]	@ (8008cac <bootloader_handle_mem_write_cmd+0xcc>)
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	617b      	str	r3, [r7, #20]
	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	3b04      	subs	r3, #4
 8008c22:	4a22      	ldr	r2, [pc, #136]	@ (8008cac <bootloader_handle_mem_write_cmd+0xcc>)
 8008c24:	4413      	add	r3, r2
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	613b      	str	r3, [r7, #16]
	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	3b04      	subs	r3, #4
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	4619      	mov	r1, r3
 8008c32:	481e      	ldr	r0, [pc, #120]	@ (8008cac <bootloader_handle_mem_write_cmd+0xcc>)
 8008c34:	f7ff feae 	bl	8008994 <bootloader_verify_crc>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d130      	bne.n	8008ca0 <bootloader_handle_mem_write_cmd+0xc0>
	{
        bootloader_send_ack(pBuffer[0],1);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	2101      	movs	r1, #1
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7ff fe79 	bl	800893c <bootloader_send_ack>
		if( verify_address(mem_address) == ADDR_VALID )
 8008c4a:	69b8      	ldr	r0, [r7, #24]
 8008c4c:	f000 f8c0 	bl	8008dd0 <verify_address>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d11b      	bne.n	8008c8e <bootloader_handle_mem_write_cmd+0xae>
		{
            //glow the led to indicate bootloader is currently writing to memory
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8008c56:	2201      	movs	r2, #1
 8008c58:	2120      	movs	r1, #32
 8008c5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008c5e:	f001 f9bf 	bl	8009fe0 <HAL_GPIO_WritePin>
            //execute mem write
            write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	3307      	adds	r3, #7
 8008c66:	7f3a      	ldrb	r2, [r7, #28]
 8008c68:	69b9      	ldr	r1, [r7, #24]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 f820 	bl	8008cb0 <execute_mem_write>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73fb      	strb	r3, [r7, #15]
            //turn off the led to indicate memory write is over
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008c74:	2200      	movs	r2, #0
 8008c76:	2120      	movs	r1, #32
 8008c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008c7c:	f001 f9b0 	bl	8009fe0 <HAL_GPIO_WritePin>
            //inform host about the status
            bootloader_uart_write_data(&write_status,1);
 8008c80:	f107 030f 	add.w	r3, r7, #15
 8008c84:	2101      	movs	r1, #1
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7ff fe3c 	bl	8008904 <bootloader_uart_write_data>
		}
	}else
	{
        bootloader_send_nack();
	}
}
 8008c8c:	e00a      	b.n	8008ca4 <bootloader_handle_mem_write_cmd+0xc4>
            write_status = ADDR_INVALID;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	73fb      	strb	r3, [r7, #15]
            bootloader_uart_write_data(&write_status,1);
 8008c92:	f107 030f 	add.w	r3, r7, #15
 8008c96:	2101      	movs	r1, #1
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff fe33 	bl	8008904 <bootloader_uart_write_data>
}
 8008c9e:	e001      	b.n	8008ca4 <bootloader_handle_mem_write_cmd+0xc4>
        bootloader_send_nack();
 8008ca0:	f7ff fe66 	bl	8008970 <bootloader_send_nack>
}
 8008ca4:	bf00      	nop
 8008ca6:	3720      	adds	r7, #32
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	20000048 	.word	0x20000048

08008cb0 <execute_mem_write>:

/*This function writes the contents of pBuffer to  "mem_address" byte by byte */
//Note1 : Currently this function supports writing to Flash only .
//Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b08a      	sub	sp, #40	@ 0x28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
    uint8_t status = HAL_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if the length is a multiple of 8 bytes (64 bits) */
    if (len % 8 != 0) {
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f003 0307 	and.w	r3, r3, #7
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <execute_mem_write+0x20>
        /* Handle error: length is not a multiple of 8 bytes */
        return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e02f      	b.n	8008d30 <execute_mem_write+0x80>
    }

    /* Calculate the number of double-words to write */
    uint32_t num_double_words = len / 8;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	08db      	lsrs	r3, r3, #3
 8008cd4:	61fb      	str	r3, [r7, #28]

    /* Unlock the flash memory */
    HAL_FLASH_Unlock();
 8008cd6:	f000 fcc3 	bl	8009660 <HAL_FLASH_Unlock>

    /* Write the data in double-words */
    for (uint32_t i = 0; i < num_double_words; i++) {
 8008cda:	2300      	movs	r3, #0
 8008cdc:	623b      	str	r3, [r7, #32]
 8008cde:	e01f      	b.n	8008d20 <execute_mem_write+0x70>
        uint64_t data = *((uint64_t *) (pBuffer + (i * 8)));
 8008ce0:	6a3b      	ldr	r3, [r7, #32]
 8008ce2:	00db      	lsls	r3, r3, #3
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cec:	e9c7 2304 	strd	r2, r3, [r7, #16]

        /* Use the FLASH_TYPEPROGRAM_DOUBLEWORD macro to program a double-word */
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, mem_address + (i * 8), data);
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	00da      	lsls	r2, r3, #3
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	18d1      	adds	r1, r2, r3
 8008cf8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	f000 fc43 	bl	8009588 <HAL_FLASH_Program>
 8008d02:	4603      	mov	r3, r0
 8008d04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK) {
 8008d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d004      	beq.n	8008d1a <execute_mem_write+0x6a>
            /* Handle error: flash programming failed */
            HAL_FLASH_Lock();
 8008d10:	f000 fcc8 	bl	80096a4 <HAL_FLASH_Lock>
            return status;
 8008d14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d18:	e00a      	b.n	8008d30 <execute_mem_write+0x80>
    for (uint32_t i = 0; i < num_double_words; i++) {
 8008d1a:	6a3b      	ldr	r3, [r7, #32]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	623b      	str	r3, [r7, #32]
 8008d20:	6a3a      	ldr	r2, [r7, #32]
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d3db      	bcc.n	8008ce0 <execute_mem_write+0x30>
        }
    }

    /* Lock the flash memory */
    HAL_FLASH_Lock();
 8008d28:	f000 fcbc 	bl	80096a4 <HAL_FLASH_Lock>

    return status;
 8008d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3728      	adds	r7, #40	@ 0x28
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <bootloader_handle_go_cmd>:

/*Helper function to handle BL_GO_TO_ADDR command */
void bootloader_handle_go_cmd(uint8_t *pBuffer)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b088      	sub	sp, #32
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
    uint32_t go_address=0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	61fb      	str	r3, [r7, #28]
    uint8_t addr_valid = ADDR_VALID;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73fb      	strb	r3, [r7, #15]
    uint8_t addr_invalid = ADDR_INVALID;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	73bb      	strb	r3, [r7, #14]

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8008d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8008dcc <bootloader_handle_go_cmd+0x94>)
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	3301      	adds	r3, #1
 8008d52:	61bb      	str	r3, [r7, #24]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	3b04      	subs	r3, #4
 8008d58:	4a1c      	ldr	r2, [pc, #112]	@ (8008dcc <bootloader_handle_go_cmd+0x94>)
 8008d5a:	4413      	add	r3, r2
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	617b      	str	r3, [r7, #20]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	3b04      	subs	r3, #4
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	4619      	mov	r1, r3
 8008d68:	4818      	ldr	r0, [pc, #96]	@ (8008dcc <bootloader_handle_go_cmd+0x94>)
 8008d6a:	f7ff fe13 	bl	8008994 <bootloader_verify_crc>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d124      	bne.n	8008dbe <bootloader_handle_go_cmd+0x86>
	{

        bootloader_send_ack(pBuffer[0],1);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2101      	movs	r1, #1
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff fdde 	bl	800893c <bootloader_send_ack>

        //extract the go address
        go_address = *((uint32_t *)&pBuffer[2] );
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008d86:	61fb      	str	r3, [r7, #28]

        if( verify_address(go_address) == ADDR_VALID )
 8008d88:	69f8      	ldr	r0, [r7, #28]
 8008d8a:	f000 f821 	bl	8008dd0 <verify_address>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10d      	bne.n	8008db0 <bootloader_handle_go_cmd+0x78>
        {
            //tell host that address is fine
            bootloader_uart_write_data(&addr_valid,1);
 8008d94:	f107 030f 	add.w	r3, r7, #15
 8008d98:	2101      	movs	r1, #1
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff fdb2 	bl	8008904 <bootloader_uart_write_data>
            Its not the duty of bootloader. so just trust and jump */

            /* Not doing the below line will result in hardfault exception for ARM cortex M */
            //watch : https://www.youtube.com/watch?v=VX_12SjnNhY

            go_address+=1; //make T bit =1
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	3301      	adds	r3, #1
 8008da4:	61fb      	str	r3, [r7, #28]

            void (*lets_jump)(void) = (void *)go_address;
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	613b      	str	r3, [r7, #16]

           

            lets_jump();
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	4798      	blx	r3
	}else
	{
       
        bootloader_send_nack();
	}
}
 8008dae:	e008      	b.n	8008dc2 <bootloader_handle_go_cmd+0x8a>
            bootloader_uart_write_data(&addr_invalid,1);
 8008db0:	f107 030e 	add.w	r3, r7, #14
 8008db4:	2101      	movs	r1, #1
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7ff fda4 	bl	8008904 <bootloader_uart_write_data>
}
 8008dbc:	e001      	b.n	8008dc2 <bootloader_handle_go_cmd+0x8a>
        bootloader_send_nack();
 8008dbe:	f7ff fdd7 	bl	8008970 <bootloader_send_nack>
}
 8008dc2:	bf00      	nop
 8008dc4:	3720      	adds	r7, #32
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20000048 	.word	0x20000048

08008dd0 <verify_address>:

//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dde:	d305      	bcc.n	8008dec <verify_address+0x1c>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a1c      	ldr	r2, [pc, #112]	@ (8008e54 <verify_address+0x84>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d801      	bhi.n	8008dec <verify_address+0x1c>
	{
		return ADDR_VALID;
 8008de8:	2300      	movs	r3, #0
 8008dea:	e02c      	b.n	8008e46 <verify_address+0x76>
	}
	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a1a      	ldr	r2, [pc, #104]	@ (8008e58 <verify_address+0x88>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d305      	bcc.n	8008e00 <verify_address+0x30>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a19      	ldr	r2, [pc, #100]	@ (8008e5c <verify_address+0x8c>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d801      	bhi.n	8008e00 <verify_address+0x30>
	{
		return ADDR_VALID;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	e022      	b.n	8008e46 <verify_address+0x76>
	}
	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e06:	d313      	bcc.n	8008e30 <verify_address+0x60>
 8008e08:	4b15      	ldr	r3, [pc, #84]	@ (8008e60 <verify_address+0x90>)
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d007      	beq.n	8008e24 <verify_address+0x54>
 8008e14:	4b12      	ldr	r3, [pc, #72]	@ (8008e60 <verify_address+0x90>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	029a      	lsls	r2, r3, #10
 8008e1a:	4b12      	ldr	r3, [pc, #72]	@ (8008e64 <verify_address+0x94>)
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8008e22:	e000      	b.n	8008e26 <verify_address+0x56>
 8008e24:	4b10      	ldr	r3, [pc, #64]	@ (8008e68 <verify_address+0x98>)
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d301      	bcc.n	8008e30 <verify_address+0x60>
	{
		return ADDR_VALID;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	e00a      	b.n	8008e46 <verify_address+0x76>
	}
	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a0e      	ldr	r2, [pc, #56]	@ (8008e6c <verify_address+0x9c>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d305      	bcc.n	8008e44 <verify_address+0x74>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a0d      	ldr	r2, [pc, #52]	@ (8008e70 <verify_address+0xa0>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d801      	bhi.n	8008e44 <verify_address+0x74>
	{
		return ADDR_VALID;
 8008e40:	2300      	movs	r3, #0
 8008e42:	e000      	b.n	8008e46 <verify_address+0x76>
	}
	else
		return ADDR_INVALID;
 8008e44:	2301      	movs	r3, #1
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	2001c000 	.word	0x2001c000
 8008e58:	20014000 	.word	0x20014000
 8008e5c:	20018000 	.word	0x20018000
 8008e60:	1fff75e0 	.word	0x1fff75e0
 8008e64:	03fffc00 	.word	0x03fffc00
 8008e68:	08020000 	.word	0x08020000
 8008e6c:	40024000 	.word	0x40024000
 8008e70:	40025000 	.word	0x40025000

08008e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb8 <HAL_MspInit+0x44>)
 8008e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8008eb8 <HAL_MspInit+0x44>)
 8008e80:	f043 0301 	orr.w	r3, r3, #1
 8008e84:	6613      	str	r3, [r2, #96]	@ 0x60
 8008e86:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb8 <HAL_MspInit+0x44>)
 8008e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	607b      	str	r3, [r7, #4]
 8008e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e92:	4b09      	ldr	r3, [pc, #36]	@ (8008eb8 <HAL_MspInit+0x44>)
 8008e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e96:	4a08      	ldr	r2, [pc, #32]	@ (8008eb8 <HAL_MspInit+0x44>)
 8008e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e9e:	4b06      	ldr	r3, [pc, #24]	@ (8008eb8 <HAL_MspInit+0x44>)
 8008ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ea6:	603b      	str	r3, [r7, #0]
 8008ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8008eaa:	f001 f979 	bl	800a1a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008eae:	bf00      	nop
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	40021000 	.word	0x40021000

08008ebc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8008ef4 <HAL_CRC_MspInit+0x38>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d10b      	bne.n	8008ee6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008ece:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef8 <HAL_CRC_MspInit+0x3c>)
 8008ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ed2:	4a09      	ldr	r2, [pc, #36]	@ (8008ef8 <HAL_CRC_MspInit+0x3c>)
 8008ed4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008ed8:	6493      	str	r3, [r2, #72]	@ 0x48
 8008eda:	4b07      	ldr	r3, [pc, #28]	@ (8008ef8 <HAL_CRC_MspInit+0x3c>)
 8008edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ede:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008ee6:	bf00      	nop
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	40023000 	.word	0x40023000
 8008ef8:	40021000 	.word	0x40021000

08008efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b09e      	sub	sp, #120	@ 0x78
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f04:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8008f08:	2200      	movs	r2, #0
 8008f0a:	601a      	str	r2, [r3, #0]
 8008f0c:	605a      	str	r2, [r3, #4]
 8008f0e:	609a      	str	r2, [r3, #8]
 8008f10:	60da      	str	r2, [r3, #12]
 8008f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008f14:	f107 0314 	add.w	r3, r7, #20
 8008f18:	2250      	movs	r2, #80	@ 0x50
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f003 f87d 	bl	800c01c <memset>
  if(huart->Instance==USART2)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a1f      	ldr	r2, [pc, #124]	@ (8008fa4 <HAL_UART_MspInit+0xa8>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d136      	bne.n	8008f9a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008f30:	2300      	movs	r3, #0
 8008f32:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008f34:	f107 0314 	add.w	r3, r7, #20
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f001 fe6f 	bl	800ac1c <HAL_RCCEx_PeriphCLKConfig>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008f44:	f7ff fc50 	bl	80087e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008f48:	4b17      	ldr	r3, [pc, #92]	@ (8008fa8 <HAL_UART_MspInit+0xac>)
 8008f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f4c:	4a16      	ldr	r2, [pc, #88]	@ (8008fa8 <HAL_UART_MspInit+0xac>)
 8008f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f52:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f54:	4b14      	ldr	r3, [pc, #80]	@ (8008fa8 <HAL_UART_MspInit+0xac>)
 8008f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f5c:	613b      	str	r3, [r7, #16]
 8008f5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f60:	4b11      	ldr	r3, [pc, #68]	@ (8008fa8 <HAL_UART_MspInit+0xac>)
 8008f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f64:	4a10      	ldr	r2, [pc, #64]	@ (8008fa8 <HAL_UART_MspInit+0xac>)
 8008f66:	f043 0301 	orr.w	r3, r3, #1
 8008f6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8008fa8 <HAL_UART_MspInit+0xac>)
 8008f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f70:	f003 0301 	and.w	r3, r3, #1
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008f78:	230c      	movs	r3, #12
 8008f7a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f80:	2300      	movs	r3, #0
 8008f82:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f84:	2300      	movs	r3, #0
 8008f86:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008f88:	2307      	movs	r3, #7
 8008f8a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f8c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8008f90:	4619      	mov	r1, r3
 8008f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008f96:	f000 fe89 	bl	8009cac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008f9a:	bf00      	nop
 8008f9c:	3778      	adds	r7, #120	@ 0x78
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	40004400 	.word	0x40004400
 8008fa8:	40021000 	.word	0x40021000

08008fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008fac:	b480      	push	{r7}
 8008fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008fb0:	bf00      	nop
 8008fb2:	e7fd      	b.n	8008fb0 <NMI_Handler+0x4>

08008fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008fb8:	bf00      	nop
 8008fba:	e7fd      	b.n	8008fb8 <HardFault_Handler+0x4>

08008fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008fc0:	bf00      	nop
 8008fc2:	e7fd      	b.n	8008fc0 <MemManage_Handler+0x4>

08008fc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008fc8:	bf00      	nop
 8008fca:	e7fd      	b.n	8008fc8 <BusFault_Handler+0x4>

08008fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008fd0:	bf00      	nop
 8008fd2:	e7fd      	b.n	8008fd0 <UsageFault_Handler+0x4>

08008fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008fd8:	bf00      	nop
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008fe6:	bf00      	nop
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008ff4:	bf00      	nop
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009002:	f000 f8a1 	bl	8009148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009006:	bf00      	nop
 8009008:	bd80      	pop	{r7, pc}

0800900a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800900e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009012:	f000 fffd 	bl	800a010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009016:	bf00      	nop
 8009018:	bd80      	pop	{r7, pc}
	...

0800901c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009020:	4b09      	ldr	r3, [pc, #36]	@ (8009048 <SystemInit+0x2c>)
 8009022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009026:	4a08      	ldr	r2, [pc, #32]	@ (8009048 <SystemInit+0x2c>)
 8009028:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800902c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8009030:	4b05      	ldr	r3, [pc, #20]	@ (8009048 <SystemInit+0x2c>)
 8009032:	4a06      	ldr	r2, [pc, #24]	@ (800904c <SystemInit+0x30>)
 8009034:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

SCB->VTOR = 0x08008000;
 8009036:	4b04      	ldr	r3, [pc, #16]	@ (8009048 <SystemInit+0x2c>)
 8009038:	4a04      	ldr	r2, [pc, #16]	@ (800904c <SystemInit+0x30>)
 800903a:	609a      	str	r2, [r3, #8]

}
 800903c:	bf00      	nop
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	e000ed00 	.word	0xe000ed00
 800904c:	08008000 	.word	0x08008000

08009050 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009050:	480d      	ldr	r0, [pc, #52]	@ (8009088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009052:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8009054:	f7ff ffe2 	bl	800901c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009058:	480c      	ldr	r0, [pc, #48]	@ (800908c <LoopForever+0x6>)
  ldr r1, =_edata
 800905a:	490d      	ldr	r1, [pc, #52]	@ (8009090 <LoopForever+0xa>)
  ldr r2, =_sidata
 800905c:	4a0d      	ldr	r2, [pc, #52]	@ (8009094 <LoopForever+0xe>)
  movs r3, #0
 800905e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8009060:	e002      	b.n	8009068 <LoopCopyDataInit>

08009062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009066:	3304      	adds	r3, #4

08009068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800906a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800906c:	d3f9      	bcc.n	8009062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800906e:	4a0a      	ldr	r2, [pc, #40]	@ (8009098 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009070:	4c0a      	ldr	r4, [pc, #40]	@ (800909c <LoopForever+0x16>)
  movs r3, #0
 8009072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009074:	e001      	b.n	800907a <LoopFillZerobss>

08009076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009078:	3204      	adds	r2, #4

0800907a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800907a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800907c:	d3fb      	bcc.n	8009076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800907e:	f002 ffd5 	bl	800c02c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009082:	f7ff fa67 	bl	8008554 <main>

08009086 <LoopForever>:

LoopForever:
    b LoopForever
 8009086:	e7fe      	b.n	8009086 <LoopForever>
  ldr   r0, =_estack
 8009088:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800908c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009090:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8009094:	0800c0dc 	.word	0x0800c0dc
  ldr r2, =_sbss
 8009098:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800909c:	200001cc 	.word	0x200001cc

080090a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80090a0:	e7fe      	b.n	80090a0 <ADC1_2_IRQHandler>

080090a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80090ac:	2003      	movs	r0, #3
 80090ae:	f000 f939 	bl	8009324 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80090b2:	2000      	movs	r0, #0
 80090b4:	f000 f80e 	bl	80090d4 <HAL_InitTick>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	71fb      	strb	r3, [r7, #7]
 80090c2:	e001      	b.n	80090c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80090c4:	f7ff fed6 	bl	8008e74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80090c8:	79fb      	ldrb	r3, [r7, #7]

}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
	...

080090d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80090dc:	2300      	movs	r3, #0
 80090de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80090e0:	4b16      	ldr	r3, [pc, #88]	@ (800913c <HAL_InitTick+0x68>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d022      	beq.n	800912e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80090e8:	4b15      	ldr	r3, [pc, #84]	@ (8009140 <HAL_InitTick+0x6c>)
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	4b13      	ldr	r3, [pc, #76]	@ (800913c <HAL_InitTick+0x68>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80090f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80090f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 f944 	bl	800938a <HAL_SYSTICK_Config>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10f      	bne.n	8009128 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b0f      	cmp	r3, #15
 800910c:	d809      	bhi.n	8009122 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800910e:	2200      	movs	r2, #0
 8009110:	6879      	ldr	r1, [r7, #4]
 8009112:	f04f 30ff 	mov.w	r0, #4294967295
 8009116:	f000 f910 	bl	800933a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800911a:	4a0a      	ldr	r2, [pc, #40]	@ (8009144 <HAL_InitTick+0x70>)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	e007      	b.n	8009132 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	73fb      	strb	r3, [r7, #15]
 8009126:	e004      	b.n	8009132 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	73fb      	strb	r3, [r7, #15]
 800912c:	e001      	b.n	8009132 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009132:	7bfb      	ldrb	r3, [r7, #15]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	20000008 	.word	0x20000008
 8009140:	20000000 	.word	0x20000000
 8009144:	20000004 	.word	0x20000004

08009148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009148:	b480      	push	{r7}
 800914a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800914c:	4b05      	ldr	r3, [pc, #20]	@ (8009164 <HAL_IncTick+0x1c>)
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	4b05      	ldr	r3, [pc, #20]	@ (8009168 <HAL_IncTick+0x20>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4413      	add	r3, r2
 8009156:	4a03      	ldr	r2, [pc, #12]	@ (8009164 <HAL_IncTick+0x1c>)
 8009158:	6013      	str	r3, [r2, #0]
}
 800915a:	bf00      	nop
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	200001c8 	.word	0x200001c8
 8009168:	20000008 	.word	0x20000008

0800916c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800916c:	b480      	push	{r7}
 800916e:	af00      	add	r7, sp, #0
  return uwTick;
 8009170:	4b03      	ldr	r3, [pc, #12]	@ (8009180 <HAL_GetTick+0x14>)
 8009172:	681b      	ldr	r3, [r3, #0]
}
 8009174:	4618      	mov	r0, r3
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	200001c8 	.word	0x200001c8

08009184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f003 0307 	and.w	r3, r3, #7
 8009192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009194:	4b0c      	ldr	r3, [pc, #48]	@ (80091c8 <__NVIC_SetPriorityGrouping+0x44>)
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80091a0:	4013      	ands	r3, r2
 80091a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80091ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80091b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80091b6:	4a04      	ldr	r2, [pc, #16]	@ (80091c8 <__NVIC_SetPriorityGrouping+0x44>)
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	60d3      	str	r3, [r2, #12]
}
 80091bc:	bf00      	nop
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr
 80091c8:	e000ed00 	.word	0xe000ed00

080091cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80091cc:	b480      	push	{r7}
 80091ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80091d0:	4b04      	ldr	r3, [pc, #16]	@ (80091e4 <__NVIC_GetPriorityGrouping+0x18>)
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	0a1b      	lsrs	r3, r3, #8
 80091d6:	f003 0307 	and.w	r3, r3, #7
}
 80091da:	4618      	mov	r0, r3
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr
 80091e4:	e000ed00 	.word	0xe000ed00

080091e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	4603      	mov	r3, r0
 80091f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	db0b      	blt.n	8009212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80091fa:	79fb      	ldrb	r3, [r7, #7]
 80091fc:	f003 021f 	and.w	r2, r3, #31
 8009200:	4907      	ldr	r1, [pc, #28]	@ (8009220 <__NVIC_EnableIRQ+0x38>)
 8009202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009206:	095b      	lsrs	r3, r3, #5
 8009208:	2001      	movs	r0, #1
 800920a:	fa00 f202 	lsl.w	r2, r0, r2
 800920e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009212:	bf00      	nop
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	e000e100 	.word	0xe000e100

08009224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	4603      	mov	r3, r0
 800922c:	6039      	str	r1, [r7, #0]
 800922e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009234:	2b00      	cmp	r3, #0
 8009236:	db0a      	blt.n	800924e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	b2da      	uxtb	r2, r3
 800923c:	490c      	ldr	r1, [pc, #48]	@ (8009270 <__NVIC_SetPriority+0x4c>)
 800923e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009242:	0112      	lsls	r2, r2, #4
 8009244:	b2d2      	uxtb	r2, r2
 8009246:	440b      	add	r3, r1
 8009248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800924c:	e00a      	b.n	8009264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	b2da      	uxtb	r2, r3
 8009252:	4908      	ldr	r1, [pc, #32]	@ (8009274 <__NVIC_SetPriority+0x50>)
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	f003 030f 	and.w	r3, r3, #15
 800925a:	3b04      	subs	r3, #4
 800925c:	0112      	lsls	r2, r2, #4
 800925e:	b2d2      	uxtb	r2, r2
 8009260:	440b      	add	r3, r1
 8009262:	761a      	strb	r2, [r3, #24]
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	e000e100 	.word	0xe000e100
 8009274:	e000ed00 	.word	0xe000ed00

08009278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009278:	b480      	push	{r7}
 800927a:	b089      	sub	sp, #36	@ 0x24
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f003 0307 	and.w	r3, r3, #7
 800928a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	f1c3 0307 	rsb	r3, r3, #7
 8009292:	2b04      	cmp	r3, #4
 8009294:	bf28      	it	cs
 8009296:	2304      	movcs	r3, #4
 8009298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	3304      	adds	r3, #4
 800929e:	2b06      	cmp	r3, #6
 80092a0:	d902      	bls.n	80092a8 <NVIC_EncodePriority+0x30>
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	3b03      	subs	r3, #3
 80092a6:	e000      	b.n	80092aa <NVIC_EncodePriority+0x32>
 80092a8:	2300      	movs	r3, #0
 80092aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092ac:	f04f 32ff 	mov.w	r2, #4294967295
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	fa02 f303 	lsl.w	r3, r2, r3
 80092b6:	43da      	mvns	r2, r3
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	401a      	ands	r2, r3
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80092c0:	f04f 31ff 	mov.w	r1, #4294967295
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	fa01 f303 	lsl.w	r3, r1, r3
 80092ca:	43d9      	mvns	r1, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092d0:	4313      	orrs	r3, r2
         );
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3724      	adds	r7, #36	@ 0x24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
	...

080092e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	3b01      	subs	r3, #1
 80092ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092f0:	d301      	bcc.n	80092f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80092f2:	2301      	movs	r3, #1
 80092f4:	e00f      	b.n	8009316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80092f6:	4a0a      	ldr	r2, [pc, #40]	@ (8009320 <SysTick_Config+0x40>)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	3b01      	subs	r3, #1
 80092fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80092fe:	210f      	movs	r1, #15
 8009300:	f04f 30ff 	mov.w	r0, #4294967295
 8009304:	f7ff ff8e 	bl	8009224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009308:	4b05      	ldr	r3, [pc, #20]	@ (8009320 <SysTick_Config+0x40>)
 800930a:	2200      	movs	r2, #0
 800930c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800930e:	4b04      	ldr	r3, [pc, #16]	@ (8009320 <SysTick_Config+0x40>)
 8009310:	2207      	movs	r2, #7
 8009312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	e000e010 	.word	0xe000e010

08009324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff ff29 	bl	8009184 <__NVIC_SetPriorityGrouping>
}
 8009332:	bf00      	nop
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b086      	sub	sp, #24
 800933e:	af00      	add	r7, sp, #0
 8009340:	4603      	mov	r3, r0
 8009342:	60b9      	str	r1, [r7, #8]
 8009344:	607a      	str	r2, [r7, #4]
 8009346:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009348:	f7ff ff40 	bl	80091cc <__NVIC_GetPriorityGrouping>
 800934c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	68b9      	ldr	r1, [r7, #8]
 8009352:	6978      	ldr	r0, [r7, #20]
 8009354:	f7ff ff90 	bl	8009278 <NVIC_EncodePriority>
 8009358:	4602      	mov	r2, r0
 800935a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800935e:	4611      	mov	r1, r2
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff ff5f 	bl	8009224 <__NVIC_SetPriority>
}
 8009366:	bf00      	nop
 8009368:	3718      	adds	r7, #24
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b082      	sub	sp, #8
 8009372:	af00      	add	r7, sp, #0
 8009374:	4603      	mov	r3, r0
 8009376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800937c:	4618      	mov	r0, r3
 800937e:	f7ff ff33 	bl	80091e8 <__NVIC_EnableIRQ>
}
 8009382:	bf00      	nop
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b082      	sub	sp, #8
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7ff ffa4 	bl	80092e0 <SysTick_Config>
 8009398:	4603      	mov	r3, r0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e054      	b.n	8009460 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	7f5b      	ldrb	r3, [r3, #29]
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d105      	bne.n	80093cc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff fd78 	bl	8008ebc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2202      	movs	r2, #2
 80093d0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	791b      	ldrb	r3, [r3, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10c      	bne.n	80093f4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a22      	ldr	r2, [pc, #136]	@ (8009468 <HAL_CRC_Init+0xc4>)
 80093e0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f022 0218 	bic.w	r2, r2, #24
 80093f0:	609a      	str	r2, [r3, #8]
 80093f2:	e00c      	b.n	800940e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6899      	ldr	r1, [r3, #8]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	461a      	mov	r2, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f834 	bl	800946c <HAL_CRCEx_Polynomial_Set>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d001      	beq.n	800940e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e028      	b.n	8009460 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	795b      	ldrb	r3, [r3, #5]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d105      	bne.n	8009422 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f04f 32ff 	mov.w	r2, #4294967295
 800941e:	611a      	str	r2, [r3, #16]
 8009420:	e004      	b.n	800942c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	6912      	ldr	r2, [r2, #16]
 800942a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	695a      	ldr	r2, [r3, #20]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	430a      	orrs	r2, r1
 8009440:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	699a      	ldr	r2, [r3, #24]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	430a      	orrs	r2, r1
 8009456:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	04c11db7 	.word	0x04c11db7

0800946c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800946c:	b480      	push	{r7}
 800946e:	b087      	sub	sp, #28
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800947c:	231f      	movs	r3, #31
 800947e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	d102      	bne.n	8009490 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	75fb      	strb	r3, [r7, #23]
 800948e:	e063      	b.n	8009558 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009490:	bf00      	nop
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	1e5a      	subs	r2, r3, #1
 8009496:	613a      	str	r2, [r7, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d009      	beq.n	80094b0 <HAL_CRCEx_Polynomial_Set+0x44>
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f003 031f 	and.w	r3, r3, #31
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	fa22 f303 	lsr.w	r3, r2, r3
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0f0      	beq.n	8009492 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b18      	cmp	r3, #24
 80094b4:	d846      	bhi.n	8009544 <HAL_CRCEx_Polynomial_Set+0xd8>
 80094b6:	a201      	add	r2, pc, #4	@ (adr r2, 80094bc <HAL_CRCEx_Polynomial_Set+0x50>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	0800954b 	.word	0x0800954b
 80094c0:	08009545 	.word	0x08009545
 80094c4:	08009545 	.word	0x08009545
 80094c8:	08009545 	.word	0x08009545
 80094cc:	08009545 	.word	0x08009545
 80094d0:	08009545 	.word	0x08009545
 80094d4:	08009545 	.word	0x08009545
 80094d8:	08009545 	.word	0x08009545
 80094dc:	08009539 	.word	0x08009539
 80094e0:	08009545 	.word	0x08009545
 80094e4:	08009545 	.word	0x08009545
 80094e8:	08009545 	.word	0x08009545
 80094ec:	08009545 	.word	0x08009545
 80094f0:	08009545 	.word	0x08009545
 80094f4:	08009545 	.word	0x08009545
 80094f8:	08009545 	.word	0x08009545
 80094fc:	0800952d 	.word	0x0800952d
 8009500:	08009545 	.word	0x08009545
 8009504:	08009545 	.word	0x08009545
 8009508:	08009545 	.word	0x08009545
 800950c:	08009545 	.word	0x08009545
 8009510:	08009545 	.word	0x08009545
 8009514:	08009545 	.word	0x08009545
 8009518:	08009545 	.word	0x08009545
 800951c:	08009521 	.word	0x08009521
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	2b06      	cmp	r3, #6
 8009524:	d913      	bls.n	800954e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800952a:	e010      	b.n	800954e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	2b07      	cmp	r3, #7
 8009530:	d90f      	bls.n	8009552 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009536:	e00c      	b.n	8009552 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	2b0f      	cmp	r3, #15
 800953c:	d90b      	bls.n	8009556 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009542:	e008      	b.n	8009556 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	75fb      	strb	r3, [r7, #23]
        break;
 8009548:	e006      	b.n	8009558 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800954a:	bf00      	nop
 800954c:	e004      	b.n	8009558 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800954e:	bf00      	nop
 8009550:	e002      	b.n	8009558 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009552:	bf00      	nop
 8009554:	e000      	b.n	8009558 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009556:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8009558:	7dfb      	ldrb	r3, [r7, #23]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10d      	bne.n	800957a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f023 0118 	bic.w	r1, r3, #24
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	430a      	orrs	r2, r1
 8009578:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800957a:	7dfb      	ldrb	r3, [r7, #23]
}
 800957c:	4618      	mov	r0, r3
 800957e:	371c      	adds	r7, #28
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8009596:	2300      	movs	r3, #0
 8009598:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800959a:	4b2f      	ldr	r3, [pc, #188]	@ (8009658 <HAL_FLASH_Program+0xd0>)
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d101      	bne.n	80095a6 <HAL_FLASH_Program+0x1e>
 80095a2:	2302      	movs	r3, #2
 80095a4:	e053      	b.n	800964e <HAL_FLASH_Program+0xc6>
 80095a6:	4b2c      	ldr	r3, [pc, #176]	@ (8009658 <HAL_FLASH_Program+0xd0>)
 80095a8:	2201      	movs	r2, #1
 80095aa:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80095ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80095b0:	f000 f892 	bl	80096d8 <FLASH_WaitForLastOperation>
 80095b4:	4603      	mov	r3, r0
 80095b6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80095b8:	7dfb      	ldrb	r3, [r7, #23]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d143      	bne.n	8009646 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80095be:	4b26      	ldr	r3, [pc, #152]	@ (8009658 <HAL_FLASH_Program+0xd0>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80095c4:	4b25      	ldr	r3, [pc, #148]	@ (800965c <HAL_FLASH_Program+0xd4>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d009      	beq.n	80095e4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80095d0:	4b22      	ldr	r3, [pc, #136]	@ (800965c <HAL_FLASH_Program+0xd4>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a21      	ldr	r2, [pc, #132]	@ (800965c <HAL_FLASH_Program+0xd4>)
 80095d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095da:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80095dc:	4b1e      	ldr	r3, [pc, #120]	@ (8009658 <HAL_FLASH_Program+0xd0>)
 80095de:	2202      	movs	r2, #2
 80095e0:	771a      	strb	r2, [r3, #28]
 80095e2:	e002      	b.n	80095ea <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80095e4:	4b1c      	ldr	r3, [pc, #112]	@ (8009658 <HAL_FLASH_Program+0xd0>)
 80095e6:	2200      	movs	r2, #0
 80095e8:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d107      	bne.n	8009600 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80095f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095f4:	68b8      	ldr	r0, [r7, #8]
 80095f6:	f000 f8c1 	bl	800977c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80095fa:	2301      	movs	r3, #1
 80095fc:	613b      	str	r3, [r7, #16]
 80095fe:	e010      	b.n	8009622 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d002      	beq.n	800960c <HAL_FLASH_Program+0x84>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b02      	cmp	r3, #2
 800960a:	d10a      	bne.n	8009622 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	4619      	mov	r1, r3
 8009610:	68b8      	ldr	r0, [r7, #8]
 8009612:	f000 f8d9 	bl	80097c8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b02      	cmp	r3, #2
 800961a:	d102      	bne.n	8009622 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800961c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009620:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009622:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009626:	f000 f857 	bl	80096d8 <FLASH_WaitForLastOperation>
 800962a:	4603      	mov	r3, r0
 800962c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d006      	beq.n	8009642 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8009634:	4b09      	ldr	r3, [pc, #36]	@ (800965c <HAL_FLASH_Program+0xd4>)
 8009636:	695a      	ldr	r2, [r3, #20]
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	43db      	mvns	r3, r3
 800963c:	4907      	ldr	r1, [pc, #28]	@ (800965c <HAL_FLASH_Program+0xd4>)
 800963e:	4013      	ands	r3, r2
 8009640:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009642:	f000 fa33 	bl	8009aac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009646:	4b04      	ldr	r3, [pc, #16]	@ (8009658 <HAL_FLASH_Program+0xd0>)
 8009648:	2200      	movs	r2, #0
 800964a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800964c:	7dfb      	ldrb	r3, [r7, #23]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	2000000c 	.word	0x2000000c
 800965c:	40022000 	.word	0x40022000

08009660 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800966a:	4b0b      	ldr	r3, [pc, #44]	@ (8009698 <HAL_FLASH_Unlock+0x38>)
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	2b00      	cmp	r3, #0
 8009670:	da0b      	bge.n	800968a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009672:	4b09      	ldr	r3, [pc, #36]	@ (8009698 <HAL_FLASH_Unlock+0x38>)
 8009674:	4a09      	ldr	r2, [pc, #36]	@ (800969c <HAL_FLASH_Unlock+0x3c>)
 8009676:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009678:	4b07      	ldr	r3, [pc, #28]	@ (8009698 <HAL_FLASH_Unlock+0x38>)
 800967a:	4a09      	ldr	r2, [pc, #36]	@ (80096a0 <HAL_FLASH_Unlock+0x40>)
 800967c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800967e:	4b06      	ldr	r3, [pc, #24]	@ (8009698 <HAL_FLASH_Unlock+0x38>)
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	da01      	bge.n	800968a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800968a:	79fb      	ldrb	r3, [r7, #7]
}
 800968c:	4618      	mov	r0, r3
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	40022000 	.word	0x40022000
 800969c:	45670123 	.word	0x45670123
 80096a0:	cdef89ab 	.word	0xcdef89ab

080096a4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80096ae:	4b09      	ldr	r3, [pc, #36]	@ (80096d4 <HAL_FLASH_Lock+0x30>)
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	4a08      	ldr	r2, [pc, #32]	@ (80096d4 <HAL_FLASH_Lock+0x30>)
 80096b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80096b8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80096ba:	4b06      	ldr	r3, [pc, #24]	@ (80096d4 <HAL_FLASH_Lock+0x30>)
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	da01      	bge.n	80096c6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80096c6:	79fb      	ldrb	r3, [r7, #7]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	40022000 	.word	0x40022000

080096d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80096e0:	f7ff fd44 	bl	800916c <HAL_GetTick>
 80096e4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80096e6:	e009      	b.n	80096fc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80096e8:	f7ff fd40 	bl	800916c <HAL_GetTick>
 80096ec:	4602      	mov	r2, r0
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d201      	bcs.n	80096fc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e037      	b.n	800976c <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80096fc:	4b1d      	ldr	r3, [pc, #116]	@ (8009774 <FLASH_WaitForLastOperation+0x9c>)
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009708:	d0ee      	beq.n	80096e8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800970a:	4b1a      	ldr	r3, [pc, #104]	@ (8009774 <FLASH_WaitForLastOperation+0x9c>)
 800970c:	691a      	ldr	r2, [r3, #16]
 800970e:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8009712:	4013      	ands	r3, r2
 8009714:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d01d      	beq.n	8009758 <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 800971c:	4b16      	ldr	r3, [pc, #88]	@ (8009778 <FLASH_WaitForLastOperation+0xa0>)
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	4313      	orrs	r3, r2
 8009724:	4a14      	ldr	r2, [pc, #80]	@ (8009778 <FLASH_WaitForLastOperation+0xa0>)
 8009726:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800972e:	d307      	bcc.n	8009740 <FLASH_WaitForLastOperation+0x68>
 8009730:	4b10      	ldr	r3, [pc, #64]	@ (8009774 <FLASH_WaitForLastOperation+0x9c>)
 8009732:	699a      	ldr	r2, [r3, #24]
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800973a:	490e      	ldr	r1, [pc, #56]	@ (8009774 <FLASH_WaitForLastOperation+0x9c>)
 800973c:	4313      	orrs	r3, r2
 800973e:	618b      	str	r3, [r1, #24]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d004      	beq.n	8009754 <FLASH_WaitForLastOperation+0x7c>
 800974a:	4a0a      	ldr	r2, [pc, #40]	@ (8009774 <FLASH_WaitForLastOperation+0x9c>)
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8009752:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e009      	b.n	800976c <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8009758:	4b06      	ldr	r3, [pc, #24]	@ (8009774 <FLASH_WaitForLastOperation+0x9c>)
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	f003 0301 	and.w	r3, r3, #1
 8009760:	2b01      	cmp	r3, #1
 8009762:	d102      	bne.n	800976a <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009764:	4b03      	ldr	r3, [pc, #12]	@ (8009774 <FLASH_WaitForLastOperation+0x9c>)
 8009766:	2201      	movs	r2, #1
 8009768:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	40022000 	.word	0x40022000
 8009778:	2000000c 	.word	0x2000000c

0800977c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009788:	4b0e      	ldr	r3, [pc, #56]	@ (80097c4 <FLASH_Program_DoubleWord+0x48>)
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	4a0d      	ldr	r2, [pc, #52]	@ (80097c4 <FLASH_Program_DoubleWord+0x48>)
 800978e:	f043 0301 	orr.w	r3, r3, #1
 8009792:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800979a:	f3bf 8f6f 	isb	sy
}
 800979e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80097a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097a4:	f04f 0200 	mov.w	r2, #0
 80097a8:	f04f 0300 	mov.w	r3, #0
 80097ac:	000a      	movs	r2, r1
 80097ae:	2300      	movs	r3, #0
 80097b0:	68f9      	ldr	r1, [r7, #12]
 80097b2:	3104      	adds	r1, #4
 80097b4:	4613      	mov	r3, r2
 80097b6:	600b      	str	r3, [r1, #0]
}
 80097b8:	bf00      	nop
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	40022000 	.word	0x40022000

080097c8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b089      	sub	sp, #36	@ 0x24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80097d2:	2340      	movs	r3, #64	@ 0x40
 80097d4:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80097de:	4b14      	ldr	r3, [pc, #80]	@ (8009830 <FLASH_Program_Fast+0x68>)
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	4a13      	ldr	r2, [pc, #76]	@ (8009830 <FLASH_Program_Fast+0x68>)
 80097e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80097e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097ea:	f3ef 8310 	mrs	r3, PRIMASK
 80097ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80097f0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80097f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80097f4:	b672      	cpsid	i
}
 80097f6:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	3304      	adds	r3, #4
 8009804:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	3304      	adds	r3, #4
 800980a:	617b      	str	r3, [r7, #20]
    row_index--;
 800980c:	7ffb      	ldrb	r3, [r7, #31]
 800980e:	3b01      	subs	r3, #1
 8009810:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8009812:	7ffb      	ldrb	r3, [r7, #31]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1ef      	bne.n	80097f8 <FLASH_Program_Fast+0x30>
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	f383 8810 	msr	PRIMASK, r3
}
 8009822:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009824:	bf00      	nop
 8009826:	3724      	adds	r7, #36	@ 0x24
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	40022000 	.word	0x40022000

08009834 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800983e:	4b48      	ldr	r3, [pc, #288]	@ (8009960 <HAL_FLASHEx_Erase+0x12c>)
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d101      	bne.n	800984a <HAL_FLASHEx_Erase+0x16>
 8009846:	2302      	movs	r3, #2
 8009848:	e085      	b.n	8009956 <HAL_FLASHEx_Erase+0x122>
 800984a:	4b45      	ldr	r3, [pc, #276]	@ (8009960 <HAL_FLASHEx_Erase+0x12c>)
 800984c:	2201      	movs	r2, #1
 800984e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009850:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009854:	f7ff ff40 	bl	80096d8 <FLASH_WaitForLastOperation>
 8009858:	4603      	mov	r3, r0
 800985a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800985c:	7bfb      	ldrb	r3, [r7, #15]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d175      	bne.n	800994e <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009862:	4b3f      	ldr	r3, [pc, #252]	@ (8009960 <HAL_FLASHEx_Erase+0x12c>)
 8009864:	2200      	movs	r2, #0
 8009866:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8009868:	4b3e      	ldr	r3, [pc, #248]	@ (8009964 <HAL_FLASHEx_Erase+0x130>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009870:	2b00      	cmp	r3, #0
 8009872:	d013      	beq.n	800989c <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009874:	4b3b      	ldr	r3, [pc, #236]	@ (8009964 <HAL_FLASHEx_Erase+0x130>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800987c:	2b00      	cmp	r3, #0
 800987e:	d009      	beq.n	8009894 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8009880:	4b38      	ldr	r3, [pc, #224]	@ (8009964 <HAL_FLASHEx_Erase+0x130>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a37      	ldr	r2, [pc, #220]	@ (8009964 <HAL_FLASHEx_Erase+0x130>)
 8009886:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800988a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800988c:	4b34      	ldr	r3, [pc, #208]	@ (8009960 <HAL_FLASHEx_Erase+0x12c>)
 800988e:	2203      	movs	r2, #3
 8009890:	771a      	strb	r2, [r3, #28]
 8009892:	e016      	b.n	80098c2 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009894:	4b32      	ldr	r3, [pc, #200]	@ (8009960 <HAL_FLASHEx_Erase+0x12c>)
 8009896:	2201      	movs	r2, #1
 8009898:	771a      	strb	r2, [r3, #28]
 800989a:	e012      	b.n	80098c2 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800989c:	4b31      	ldr	r3, [pc, #196]	@ (8009964 <HAL_FLASHEx_Erase+0x130>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d009      	beq.n	80098bc <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80098a8:	4b2e      	ldr	r3, [pc, #184]	@ (8009964 <HAL_FLASHEx_Erase+0x130>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a2d      	ldr	r2, [pc, #180]	@ (8009964 <HAL_FLASHEx_Erase+0x130>)
 80098ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80098b2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80098b4:	4b2a      	ldr	r3, [pc, #168]	@ (8009960 <HAL_FLASHEx_Erase+0x12c>)
 80098b6:	2202      	movs	r2, #2
 80098b8:	771a      	strb	r2, [r3, #28]
 80098ba:	e002      	b.n	80098c2 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80098bc:	4b28      	ldr	r3, [pc, #160]	@ (8009960 <HAL_FLASHEx_Erase+0x12c>)
 80098be:	2200      	movs	r2, #0
 80098c0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d111      	bne.n	80098ee <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 f8aa 	bl	8009a28 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80098d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80098d8:	f7ff fefe 	bl	80096d8 <FLASH_WaitForLastOperation>
 80098dc:	4603      	mov	r3, r0
 80098de:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80098e0:	4b20      	ldr	r3, [pc, #128]	@ (8009964 <HAL_FLASHEx_Erase+0x130>)
 80098e2:	695b      	ldr	r3, [r3, #20]
 80098e4:	4a1f      	ldr	r2, [pc, #124]	@ (8009964 <HAL_FLASHEx_Erase+0x130>)
 80098e6:	f023 0304 	bic.w	r3, r3, #4
 80098ea:	6153      	str	r3, [r2, #20]
 80098ec:	e02d      	b.n	800994a <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	f04f 32ff 	mov.w	r2, #4294967295
 80098f4:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	60bb      	str	r3, [r7, #8]
 80098fc:	e01d      	b.n	800993a <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	4619      	mov	r1, r3
 8009904:	68b8      	ldr	r0, [r7, #8]
 8009906:	f000 f8ad 	bl	8009a64 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800990a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800990e:	f7ff fee3 	bl	80096d8 <FLASH_WaitForLastOperation>
 8009912:	4603      	mov	r3, r0
 8009914:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8009916:	4b13      	ldr	r3, [pc, #76]	@ (8009964 <HAL_FLASHEx_Erase+0x130>)
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	4a12      	ldr	r2, [pc, #72]	@ (8009964 <HAL_FLASHEx_Erase+0x130>)
 800991c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009920:	f023 0302 	bic.w	r3, r3, #2
 8009924:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8009926:	7bfb      	ldrb	r3, [r7, #15]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	601a      	str	r2, [r3, #0]
          break;
 8009932:	e00a      	b.n	800994a <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	3301      	adds	r3, #1
 8009938:	60bb      	str	r3, [r7, #8]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	689a      	ldr	r2, [r3, #8]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	4413      	add	r3, r2
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	429a      	cmp	r2, r3
 8009948:	d3d9      	bcc.n	80098fe <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800994a:	f000 f8af 	bl	8009aac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800994e:	4b04      	ldr	r3, [pc, #16]	@ (8009960 <HAL_FLASHEx_Erase+0x12c>)
 8009950:	2200      	movs	r2, #0
 8009952:	701a      	strb	r2, [r3, #0]

  return status;
 8009954:	7bfb      	ldrb	r3, [r7, #15]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	2000000c 	.word	0x2000000c
 8009964:	40022000 	.word	0x40022000

08009968 <HAL_FLASHEx_OBGetConfig>:
  * @note   The fields pOBInit->WRPArea and pOBInit->PCROPConfig should indicate
  *         which area is requested for the WRP and PCROP, else no information will be returned.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2206      	movs	r2, #6
 8009974:	601a      	str	r2, [r3, #0]

#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
#else
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d003      	beq.n	8009986 <HAL_FLASHEx_OBGetConfig+0x1e>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d10f      	bne.n	80099a6 <HAL_FLASHEx_OBGetConfig+0x3e>
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f043 0201 	orr.w	r2, r3, #1
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6858      	ldr	r0, [r3, #4]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f103 0108 	add.w	r1, r3, #8
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	330c      	adds	r3, #12
 80099a0:	461a      	mov	r2, r3
 80099a2:	f000 f8f1 	bl	8009b88 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80099a6:	f000 f91f 	bl	8009be8 <FLASH_OB_GetRDP>
 80099aa:	4602      	mov	r2, r0
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80099b0:	f000 f932 	bl	8009c18 <FLASH_OB_GetUser>
 80099b4:	4602      	mov	r2, r0
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	619a      	str	r2, [r3, #24]

#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
#else
  if (pOBInit->PCROPConfig == FLASH_BANK_1)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d110      	bne.n	80099e4 <HAL_FLASHEx_OBGetConfig+0x7c>
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f043 0208 	orr.w	r2, r3, #8
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f103 001c 	add.w	r0, r3, #28
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f103 0120 	add.w	r1, r3, #32
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	3324      	adds	r3, #36	@ 0x24
 80099de:	461a      	mov	r2, r3
 80099e0:	f000 f92e 	bl	8009c40 <FLASH_OB_GetPCROP>
  }

  pOBInit->OptionType |= OPTIONBYTE_BOOT_LOCK;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f043 0210 	orr.w	r2, r3, #16
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	601a      	str	r2, [r3, #0]

  /* Get the boot entry point */
  pOBInit->BootEntryPoint = FLASH_OB_GetBootLock();
 80099f0:	f000 f8bc 	bl	8009b6c <FLASH_OB_GetBootLock>
 80099f4:	4602      	mov	r2, r0
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Get the securable memory area configuration */
#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->SecBank == FLASH_BANK_1) || (pOBInit->SecBank == FLASH_BANK_2))
#else
  if (pOBInit->SecBank == FLASH_BANK_1)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d10d      	bne.n	8009a1e <HAL_FLASHEx_OBGetConfig+0xb6>
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_SEC;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f043 0220 	orr.w	r2, r3, #32
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	601a      	str	r2, [r3, #0]
    FLASH_OB_GetSecMem(pOBInit->SecBank, &(pOBInit->SecSize));
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	3330      	adds	r3, #48	@ 0x30
 8009a16:	4619      	mov	r1, r3
 8009a18:	4610      	mov	r0, r2
 8009a1a:	f000 f891 	bl	8009b40 <FLASH_OB_GetSecMem>
  }
}
 8009a1e:	bf00      	nop
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
	...

08009a28 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f003 0301 	and.w	r3, r3, #1
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d005      	beq.n	8009a46 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8009a3a:	4b09      	ldr	r3, [pc, #36]	@ (8009a60 <FLASH_MassErase+0x38>)
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	4a08      	ldr	r2, [pc, #32]	@ (8009a60 <FLASH_MassErase+0x38>)
 8009a40:	f043 0304 	orr.w	r3, r3, #4
 8009a44:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009a46:	4b06      	ldr	r3, [pc, #24]	@ (8009a60 <FLASH_MassErase+0x38>)
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	4a05      	ldr	r2, [pc, #20]	@ (8009a60 <FLASH_MassErase+0x38>)
 8009a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a50:	6153      	str	r3, [r2, #20]
}
 8009a52:	bf00      	nop
 8009a54:	370c      	adds	r7, #12
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	40022000 	.word	0x40022000

08009a64 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8009a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009aa8 <FLASH_PageErase+0x44>)
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	00db      	lsls	r3, r3, #3
 8009a7a:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8009a7e:	490a      	ldr	r1, [pc, #40]	@ (8009aa8 <FLASH_PageErase+0x44>)
 8009a80:	4313      	orrs	r3, r2
 8009a82:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009a84:	4b08      	ldr	r3, [pc, #32]	@ (8009aa8 <FLASH_PageErase+0x44>)
 8009a86:	695b      	ldr	r3, [r3, #20]
 8009a88:	4a07      	ldr	r2, [pc, #28]	@ (8009aa8 <FLASH_PageErase+0x44>)
 8009a8a:	f043 0302 	orr.w	r3, r3, #2
 8009a8e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009a90:	4b05      	ldr	r3, [pc, #20]	@ (8009aa8 <FLASH_PageErase+0x44>)
 8009a92:	695b      	ldr	r3, [r3, #20]
 8009a94:	4a04      	ldr	r2, [pc, #16]	@ (8009aa8 <FLASH_PageErase+0x44>)
 8009a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a9a:	6153      	str	r3, [r2, #20]
}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	40022000 	.word	0x40022000

08009aac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8009ab2:	4b21      	ldr	r3, [pc, #132]	@ (8009b38 <FLASH_FlushCaches+0x8c>)
 8009ab4:	7f1b      	ldrb	r3, [r3, #28]
 8009ab6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8009ab8:	79fb      	ldrb	r3, [r7, #7]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d002      	beq.n	8009ac4 <FLASH_FlushCaches+0x18>
 8009abe:	79fb      	ldrb	r3, [r7, #7]
 8009ac0:	2b03      	cmp	r3, #3
 8009ac2:	d117      	bne.n	8009af4 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8009b3c <FLASH_FlushCaches+0x90>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8009b3c <FLASH_FlushCaches+0x90>)
 8009aca:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009ace:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8009b3c <FLASH_FlushCaches+0x90>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a19      	ldr	r2, [pc, #100]	@ (8009b3c <FLASH_FlushCaches+0x90>)
 8009ad6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009ada:	6013      	str	r3, [r2, #0]
 8009adc:	4b17      	ldr	r3, [pc, #92]	@ (8009b3c <FLASH_FlushCaches+0x90>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a16      	ldr	r2, [pc, #88]	@ (8009b3c <FLASH_FlushCaches+0x90>)
 8009ae2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009ae6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009ae8:	4b14      	ldr	r3, [pc, #80]	@ (8009b3c <FLASH_FlushCaches+0x90>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a13      	ldr	r2, [pc, #76]	@ (8009b3c <FLASH_FlushCaches+0x90>)
 8009aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009af2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d002      	beq.n	8009b00 <FLASH_FlushCaches+0x54>
 8009afa:	79fb      	ldrb	r3, [r7, #7]
 8009afc:	2b03      	cmp	r3, #3
 8009afe:	d111      	bne.n	8009b24 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009b00:	4b0e      	ldr	r3, [pc, #56]	@ (8009b3c <FLASH_FlushCaches+0x90>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a0d      	ldr	r2, [pc, #52]	@ (8009b3c <FLASH_FlushCaches+0x90>)
 8009b06:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009b0a:	6013      	str	r3, [r2, #0]
 8009b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8009b3c <FLASH_FlushCaches+0x90>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a0a      	ldr	r2, [pc, #40]	@ (8009b3c <FLASH_FlushCaches+0x90>)
 8009b12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b16:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009b18:	4b08      	ldr	r3, [pc, #32]	@ (8009b3c <FLASH_FlushCaches+0x90>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a07      	ldr	r2, [pc, #28]	@ (8009b3c <FLASH_FlushCaches+0x90>)
 8009b1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009b22:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009b24:	4b04      	ldr	r3, [pc, #16]	@ (8009b38 <FLASH_FlushCaches+0x8c>)
 8009b26:	2200      	movs	r2, #0
 8009b28:	771a      	strb	r2, [r3, #28]
}
 8009b2a:	bf00      	nop
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	2000000c 	.word	0x2000000c
 8009b3c:	40022000 	.word	0x40022000

08009b40 <FLASH_OB_GetSecMem>:
  * @param[out]  SecSize specifies the number of pages used in the securable
                 memory area of the bank.
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t SecBank, uint32_t *SecSize)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  /* Get the configuration of the securable memory area */
  if (SecBank == FLASH_BANK_1)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d104      	bne.n	8009b5a <FLASH_OB_GetSecMem+0x1a>
  {
    *SecSize = READ_BIT(FLASH->SEC1R, FLASH_SEC1R_SEC_SIZE1);
 8009b50:	4b05      	ldr	r3, [pc, #20]	@ (8009b68 <FLASH_OB_GetSecMem+0x28>)
 8009b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }
#endif
}
 8009b5a:	bf00      	nop
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	40022000 	.word	0x40022000

08009b6c <FLASH_OB_GetBootLock>:
  *         This return value can be one of the following values:
  *            @arg OB_BOOT_LOCK_ENABLE: Boot lock enabled
  *            @arg OB_BOOT_LOCK_DISABLE: Boot lock disabled
  */
static uint32_t FLASH_OB_GetBootLock(void)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	af00      	add	r7, sp, #0
  return (READ_REG(FLASH->SEC1R) & FLASH_SEC1R_BOOT_LOCK);
 8009b70:	4b04      	ldr	r3, [pc, #16]	@ (8009b84 <FLASH_OB_GetBootLock+0x18>)
 8009b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	40022000 	.word	0x40022000

08009b88 <FLASH_OB_GetWRP>:
  * @param[out]  WRDPEndOffset specifies the address where to copied the end page of
  *              the write protected area.
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRDPEndOffset)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10d      	bne.n	8009bb6 <FLASH_OB_GetWRP+0x2e>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8009b9a:	4b12      	ldr	r3, [pc, #72]	@ (8009be4 <FLASH_OB_GetWRP+0x5c>)
 8009b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 8009ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8009be4 <FLASH_OB_GetWRP+0x5c>)
 8009ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009baa:	0c1b      	lsrs	r3, r3, #16
 8009bac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 8009bb4:	e00f      	b.n	8009bd6 <FLASH_OB_GetWRP+0x4e>
  else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d10c      	bne.n	8009bd6 <FLASH_OB_GetWRP+0x4e>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8009bbc:	4b09      	ldr	r3, [pc, #36]	@ (8009be4 <FLASH_OB_GetWRP+0x5c>)
 8009bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 8009bc8:	4b06      	ldr	r3, [pc, #24]	@ (8009be4 <FLASH_OB_GetWRP+0x5c>)
 8009bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bcc:	0c1b      	lsrs	r3, r3, #16
 8009bce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	601a      	str	r2, [r3, #0]
}
 8009bd6:	bf00      	nop
 8009bd8:	3714      	adds	r7, #20
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	40022000 	.word	0x40022000

08009be8 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8009bee:	4b09      	ldr	r3, [pc, #36]	@ (8009c14 <FLASH_OB_GetRDP+0x2c>)
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2baa      	cmp	r3, #170	@ 0xaa
 8009bfa:	d004      	beq.n	8009c06 <FLASH_OB_GetRDP+0x1e>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2bcc      	cmp	r3, #204	@ 0xcc
 8009c00:	d001      	beq.n	8009c06 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 8009c02:	23bb      	movs	r3, #187	@ 0xbb
 8009c04:	e000      	b.n	8009c08 <FLASH_OB_GetRDP+0x20>
  }
  else
  {
    return rdp_level;
 8009c06:	687b      	ldr	r3, [r7, #4]
  }
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	40022000 	.word	0x40022000

08009c18 <FLASH_OB_GetUser>:
  *         @ref FLASH_OB_USER_CCMSRAM_RST, @ref OB_USER_nSWBOOT0,@ref FLASH_OB_USER_nBOOT0,
  *         @ref FLASH_OB_USER_NRST_MODE, @ref FLASH_OB_USER_INTERNAL_RESET_HOLDER
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8009c1e:	4b07      	ldr	r3, [pc, #28]	@ (8009c3c <FLASH_OB_GetUser+0x24>)
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009c2a:	607b      	str	r3, [r7, #4]

  return user_config;
 8009c2c:	687b      	ldr	r3, [r7, #4]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	40022000 	.word	0x40022000

08009c40 <FLASH_OB_GetPCROP>:
  * @param[out] PCROPEndAddr specifies the address where to copied the end address of
  *        the Proprietary code readout protection.
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b087      	sub	sp, #28
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
    bank2_addr = FLASH_BASE;
  }
#else
  bank1_addr = FLASH_BASE;
 8009c4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009c50:	617b      	str	r3, [r7, #20]
    }
  }
  else
#endif
  {
    if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 0301 	and.w	r3, r3, #1
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d015      	beq.n	8009c8a <FLASH_OB_GetPCROP+0x4a>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8009c5e:	4b12      	ldr	r3, [pc, #72]	@ (8009ca8 <FLASH_OB_GetPCROP+0x68>)
 8009c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c62:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009c66:	613b      	str	r3, [r7, #16]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	00da      	lsls	r2, r3, #3
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	441a      	add	r2, r3
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8009c74:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca8 <FLASH_OB_GetPCROP+0x68>)
 8009c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c78:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009c7c:	613b      	str	r3, [r7, #16]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	00da      	lsls	r2, r3, #3
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	441a      	add	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 8009c8a:	4b07      	ldr	r3, [pc, #28]	@ (8009ca8 <FLASH_OB_GetPCROP+0x68>)
 8009c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c8e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	431a      	orrs	r2, r3
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	601a      	str	r2, [r3, #0]
}
 8009c9c:	bf00      	nop
 8009c9e:	371c      	adds	r7, #28
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	40022000 	.word	0x40022000

08009cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b087      	sub	sp, #28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009cba:	e15a      	b.n	8009f72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8009cc8:	4013      	ands	r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f000 814c 	beq.w	8009f6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	f003 0303 	and.w	r3, r3, #3
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d005      	beq.n	8009cec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d130      	bne.n	8009d4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	005b      	lsls	r3, r3, #1
 8009cf6:	2203      	movs	r2, #3
 8009cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cfc:	43db      	mvns	r3, r3
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	4013      	ands	r3, r2
 8009d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	68da      	ldr	r2, [r3, #12]
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	005b      	lsls	r3, r3, #1
 8009d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	693a      	ldr	r2, [r7, #16]
 8009d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009d22:	2201      	movs	r2, #1
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	fa02 f303 	lsl.w	r3, r2, r3
 8009d2a:	43db      	mvns	r3, r3
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	4013      	ands	r3, r2
 8009d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	091b      	lsrs	r3, r3, #4
 8009d38:	f003 0201 	and.w	r2, r3, #1
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d42:	693a      	ldr	r2, [r7, #16]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	f003 0303 	and.w	r3, r3, #3
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d017      	beq.n	8009d8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	005b      	lsls	r3, r3, #1
 8009d64:	2203      	movs	r2, #3
 8009d66:	fa02 f303 	lsl.w	r3, r2, r3
 8009d6a:	43db      	mvns	r3, r3
 8009d6c:	693a      	ldr	r2, [r7, #16]
 8009d6e:	4013      	ands	r3, r2
 8009d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	689a      	ldr	r2, [r3, #8]
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	005b      	lsls	r3, r3, #1
 8009d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	f003 0303 	and.w	r3, r3, #3
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d123      	bne.n	8009dde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	08da      	lsrs	r2, r3, #3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	3208      	adds	r2, #8
 8009d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	f003 0307 	and.w	r3, r3, #7
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	220f      	movs	r2, #15
 8009dae:	fa02 f303 	lsl.w	r3, r2, r3
 8009db2:	43db      	mvns	r3, r3
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	4013      	ands	r3, r2
 8009db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	691a      	ldr	r2, [r3, #16]
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f003 0307 	and.w	r3, r3, #7
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009dca:	693a      	ldr	r2, [r7, #16]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	08da      	lsrs	r2, r3, #3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3208      	adds	r2, #8
 8009dd8:	6939      	ldr	r1, [r7, #16]
 8009dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	005b      	lsls	r3, r3, #1
 8009de8:	2203      	movs	r2, #3
 8009dea:	fa02 f303 	lsl.w	r3, r2, r3
 8009dee:	43db      	mvns	r3, r3
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	4013      	ands	r3, r2
 8009df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	f003 0203 	and.w	r2, r3, #3
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	005b      	lsls	r3, r3, #1
 8009e02:	fa02 f303 	lsl.w	r3, r2, r3
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 80a6 	beq.w	8009f6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e20:	4b5b      	ldr	r3, [pc, #364]	@ (8009f90 <HAL_GPIO_Init+0x2e4>)
 8009e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e24:	4a5a      	ldr	r2, [pc, #360]	@ (8009f90 <HAL_GPIO_Init+0x2e4>)
 8009e26:	f043 0301 	orr.w	r3, r3, #1
 8009e2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8009e2c:	4b58      	ldr	r3, [pc, #352]	@ (8009f90 <HAL_GPIO_Init+0x2e4>)
 8009e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e30:	f003 0301 	and.w	r3, r3, #1
 8009e34:	60bb      	str	r3, [r7, #8]
 8009e36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009e38:	4a56      	ldr	r2, [pc, #344]	@ (8009f94 <HAL_GPIO_Init+0x2e8>)
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	089b      	lsrs	r3, r3, #2
 8009e3e:	3302      	adds	r3, #2
 8009e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	f003 0303 	and.w	r3, r3, #3
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	220f      	movs	r2, #15
 8009e50:	fa02 f303 	lsl.w	r3, r2, r3
 8009e54:	43db      	mvns	r3, r3
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	4013      	ands	r3, r2
 8009e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8009e62:	d01f      	beq.n	8009ea4 <HAL_GPIO_Init+0x1f8>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a4c      	ldr	r2, [pc, #304]	@ (8009f98 <HAL_GPIO_Init+0x2ec>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d019      	beq.n	8009ea0 <HAL_GPIO_Init+0x1f4>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a4b      	ldr	r2, [pc, #300]	@ (8009f9c <HAL_GPIO_Init+0x2f0>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d013      	beq.n	8009e9c <HAL_GPIO_Init+0x1f0>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a4a      	ldr	r2, [pc, #296]	@ (8009fa0 <HAL_GPIO_Init+0x2f4>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d00d      	beq.n	8009e98 <HAL_GPIO_Init+0x1ec>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a49      	ldr	r2, [pc, #292]	@ (8009fa4 <HAL_GPIO_Init+0x2f8>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d007      	beq.n	8009e94 <HAL_GPIO_Init+0x1e8>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a48      	ldr	r2, [pc, #288]	@ (8009fa8 <HAL_GPIO_Init+0x2fc>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d101      	bne.n	8009e90 <HAL_GPIO_Init+0x1e4>
 8009e8c:	2305      	movs	r3, #5
 8009e8e:	e00a      	b.n	8009ea6 <HAL_GPIO_Init+0x1fa>
 8009e90:	2306      	movs	r3, #6
 8009e92:	e008      	b.n	8009ea6 <HAL_GPIO_Init+0x1fa>
 8009e94:	2304      	movs	r3, #4
 8009e96:	e006      	b.n	8009ea6 <HAL_GPIO_Init+0x1fa>
 8009e98:	2303      	movs	r3, #3
 8009e9a:	e004      	b.n	8009ea6 <HAL_GPIO_Init+0x1fa>
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	e002      	b.n	8009ea6 <HAL_GPIO_Init+0x1fa>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e000      	b.n	8009ea6 <HAL_GPIO_Init+0x1fa>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	697a      	ldr	r2, [r7, #20]
 8009ea8:	f002 0203 	and.w	r2, r2, #3
 8009eac:	0092      	lsls	r2, r2, #2
 8009eae:	4093      	lsls	r3, r2
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009eb6:	4937      	ldr	r1, [pc, #220]	@ (8009f94 <HAL_GPIO_Init+0x2e8>)
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	089b      	lsrs	r3, r3, #2
 8009ebc:	3302      	adds	r3, #2
 8009ebe:	693a      	ldr	r2, [r7, #16]
 8009ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009ec4:	4b39      	ldr	r3, [pc, #228]	@ (8009fac <HAL_GPIO_Init+0x300>)
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	43db      	mvns	r3, r3
 8009ece:	693a      	ldr	r2, [r7, #16]
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d003      	beq.n	8009ee8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009ee8:	4a30      	ldr	r2, [pc, #192]	@ (8009fac <HAL_GPIO_Init+0x300>)
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009eee:	4b2f      	ldr	r3, [pc, #188]	@ (8009fac <HAL_GPIO_Init+0x300>)
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	43db      	mvns	r3, r3
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	4013      	ands	r3, r2
 8009efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d003      	beq.n	8009f12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009f12:	4a26      	ldr	r2, [pc, #152]	@ (8009fac <HAL_GPIO_Init+0x300>)
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009f18:	4b24      	ldr	r3, [pc, #144]	@ (8009fac <HAL_GPIO_Init+0x300>)
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	43db      	mvns	r3, r3
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	4013      	ands	r3, r2
 8009f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d003      	beq.n	8009f3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8009fac <HAL_GPIO_Init+0x300>)
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009f42:	4b1a      	ldr	r3, [pc, #104]	@ (8009fac <HAL_GPIO_Init+0x300>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	43db      	mvns	r3, r3
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	4013      	ands	r3, r2
 8009f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009f5e:	693a      	ldr	r2, [r7, #16]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009f66:	4a11      	ldr	r2, [pc, #68]	@ (8009fac <HAL_GPIO_Init+0x300>)
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	fa22 f303 	lsr.w	r3, r2, r3
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f47f ae9d 	bne.w	8009cbc <HAL_GPIO_Init+0x10>
  }
}
 8009f82:	bf00      	nop
 8009f84:	bf00      	nop
 8009f86:	371c      	adds	r7, #28
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr
 8009f90:	40021000 	.word	0x40021000
 8009f94:	40010000 	.word	0x40010000
 8009f98:	48000400 	.word	0x48000400
 8009f9c:	48000800 	.word	0x48000800
 8009fa0:	48000c00 	.word	0x48000c00
 8009fa4:	48001000 	.word	0x48001000
 8009fa8:	48001400 	.word	0x48001400
 8009fac:	40010400 	.word	0x40010400

08009fb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	691a      	ldr	r2, [r3, #16]
 8009fc0:	887b      	ldrh	r3, [r7, #2]
 8009fc2:	4013      	ands	r3, r2
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	73fb      	strb	r3, [r7, #15]
 8009fcc:	e001      	b.n	8009fd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	807b      	strh	r3, [r7, #2]
 8009fec:	4613      	mov	r3, r2
 8009fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009ff0:	787b      	ldrb	r3, [r7, #1]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d003      	beq.n	8009ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009ff6:	887a      	ldrh	r2, [r7, #2]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009ffc:	e002      	b.n	800a004 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009ffe:	887a      	ldrh	r2, [r7, #2]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	4603      	mov	r3, r0
 800a018:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a01a:	4b08      	ldr	r3, [pc, #32]	@ (800a03c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a01c:	695a      	ldr	r2, [r3, #20]
 800a01e:	88fb      	ldrh	r3, [r7, #6]
 800a020:	4013      	ands	r3, r2
 800a022:	2b00      	cmp	r3, #0
 800a024:	d006      	beq.n	800a034 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a026:	4a05      	ldr	r2, [pc, #20]	@ (800a03c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a028:	88fb      	ldrh	r3, [r7, #6]
 800a02a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a02c:	88fb      	ldrh	r3, [r7, #6]
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 f806 	bl	800a040 <HAL_GPIO_EXTI_Callback>
  }
}
 800a034:	bf00      	nop
 800a036:	3708      	adds	r7, #8
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	40010400 	.word	0x40010400

0800a040 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	4603      	mov	r3, r0
 800a048:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a04a:	bf00      	nop
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
	...

0800a058 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d141      	bne.n	800a0ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a066:	4b4b      	ldr	r3, [pc, #300]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a06e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a072:	d131      	bne.n	800a0d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a074:	4b47      	ldr	r3, [pc, #284]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a07a:	4a46      	ldr	r2, [pc, #280]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a07c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a080:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a084:	4b43      	ldr	r3, [pc, #268]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a08c:	4a41      	ldr	r2, [pc, #260]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a08e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a092:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a094:	4b40      	ldr	r3, [pc, #256]	@ (800a198 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2232      	movs	r2, #50	@ 0x32
 800a09a:	fb02 f303 	mul.w	r3, r2, r3
 800a09e:	4a3f      	ldr	r2, [pc, #252]	@ (800a19c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a0a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a4:	0c9b      	lsrs	r3, r3, #18
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a0aa:	e002      	b.n	800a0b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a0b2:	4b38      	ldr	r3, [pc, #224]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0b4:	695b      	ldr	r3, [r3, #20]
 800a0b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0be:	d102      	bne.n	800a0c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1f2      	bne.n	800a0ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a0c6:	4b33      	ldr	r3, [pc, #204]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0d2:	d158      	bne.n	800a186 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a0d4:	2303      	movs	r3, #3
 800a0d6:	e057      	b.n	800a188 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a0d8:	4b2e      	ldr	r3, [pc, #184]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0de:	4a2d      	ldr	r2, [pc, #180]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800a0e8:	e04d      	b.n	800a186 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0f0:	d141      	bne.n	800a176 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a0f2:	4b28      	ldr	r3, [pc, #160]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a0fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0fe:	d131      	bne.n	800a164 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a100:	4b24      	ldr	r3, [pc, #144]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a106:	4a23      	ldr	r2, [pc, #140]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a10c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a110:	4b20      	ldr	r3, [pc, #128]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a118:	4a1e      	ldr	r2, [pc, #120]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a11a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a11e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a120:	4b1d      	ldr	r3, [pc, #116]	@ (800a198 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2232      	movs	r2, #50	@ 0x32
 800a126:	fb02 f303 	mul.w	r3, r2, r3
 800a12a:	4a1c      	ldr	r2, [pc, #112]	@ (800a19c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a12c:	fba2 2303 	umull	r2, r3, r2, r3
 800a130:	0c9b      	lsrs	r3, r3, #18
 800a132:	3301      	adds	r3, #1
 800a134:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a136:	e002      	b.n	800a13e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a13e:	4b15      	ldr	r3, [pc, #84]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a140:	695b      	ldr	r3, [r3, #20]
 800a142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a14a:	d102      	bne.n	800a152 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1f2      	bne.n	800a138 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a152:	4b10      	ldr	r3, [pc, #64]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a15a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a15e:	d112      	bne.n	800a186 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a160:	2303      	movs	r3, #3
 800a162:	e011      	b.n	800a188 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a164:	4b0b      	ldr	r3, [pc, #44]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a16a:	4a0a      	ldr	r2, [pc, #40]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a16c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a170:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800a174:	e007      	b.n	800a186 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a176:	4b07      	ldr	r3, [pc, #28]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800a17e:	4a05      	ldr	r2, [pc, #20]	@ (800a194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a180:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a184:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3714      	adds	r7, #20
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr
 800a194:	40007000 	.word	0x40007000
 800a198:	20000000 	.word	0x20000000
 800a19c:	431bde83 	.word	0x431bde83

0800a1a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a1a4:	4b05      	ldr	r3, [pc, #20]	@ (800a1bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	4a04      	ldr	r2, [pc, #16]	@ (800a1bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a1aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a1ae:	6093      	str	r3, [r2, #8]
}
 800a1b0:	bf00      	nop
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	40007000 	.word	0x40007000

0800a1c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e2fe      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d075      	beq.n	800a2ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1de:	4b97      	ldr	r3, [pc, #604]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	f003 030c 	and.w	r3, r3, #12
 800a1e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a1e8:	4b94      	ldr	r3, [pc, #592]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	f003 0303 	and.w	r3, r3, #3
 800a1f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	2b0c      	cmp	r3, #12
 800a1f6:	d102      	bne.n	800a1fe <HAL_RCC_OscConfig+0x3e>
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	2b03      	cmp	r3, #3
 800a1fc:	d002      	beq.n	800a204 <HAL_RCC_OscConfig+0x44>
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	2b08      	cmp	r3, #8
 800a202:	d10b      	bne.n	800a21c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a204:	4b8d      	ldr	r3, [pc, #564]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d05b      	beq.n	800a2c8 <HAL_RCC_OscConfig+0x108>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d157      	bne.n	800a2c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	e2d9      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a224:	d106      	bne.n	800a234 <HAL_RCC_OscConfig+0x74>
 800a226:	4b85      	ldr	r3, [pc, #532]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a84      	ldr	r2, [pc, #528]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a22c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a230:	6013      	str	r3, [r2, #0]
 800a232:	e01d      	b.n	800a270 <HAL_RCC_OscConfig+0xb0>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a23c:	d10c      	bne.n	800a258 <HAL_RCC_OscConfig+0x98>
 800a23e:	4b7f      	ldr	r3, [pc, #508]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a7e      	ldr	r2, [pc, #504]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a248:	6013      	str	r3, [r2, #0]
 800a24a:	4b7c      	ldr	r3, [pc, #496]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a7b      	ldr	r2, [pc, #492]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	e00b      	b.n	800a270 <HAL_RCC_OscConfig+0xb0>
 800a258:	4b78      	ldr	r3, [pc, #480]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a77      	ldr	r2, [pc, #476]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a25e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a262:	6013      	str	r3, [r2, #0]
 800a264:	4b75      	ldr	r3, [pc, #468]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a74      	ldr	r2, [pc, #464]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a26a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a26e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d013      	beq.n	800a2a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a278:	f7fe ff78 	bl	800916c <HAL_GetTick>
 800a27c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a27e:	e008      	b.n	800a292 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a280:	f7fe ff74 	bl	800916c <HAL_GetTick>
 800a284:	4602      	mov	r2, r0
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	2b64      	cmp	r3, #100	@ 0x64
 800a28c:	d901      	bls.n	800a292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a28e:	2303      	movs	r3, #3
 800a290:	e29e      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a292:	4b6a      	ldr	r3, [pc, #424]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d0f0      	beq.n	800a280 <HAL_RCC_OscConfig+0xc0>
 800a29e:	e014      	b.n	800a2ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2a0:	f7fe ff64 	bl	800916c <HAL_GetTick>
 800a2a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a2a6:	e008      	b.n	800a2ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2a8:	f7fe ff60 	bl	800916c <HAL_GetTick>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	2b64      	cmp	r3, #100	@ 0x64
 800a2b4:	d901      	bls.n	800a2ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	e28a      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a2ba:	4b60      	ldr	r3, [pc, #384]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1f0      	bne.n	800a2a8 <HAL_RCC_OscConfig+0xe8>
 800a2c6:	e000      	b.n	800a2ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d075      	beq.n	800a3c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2d6:	4b59      	ldr	r3, [pc, #356]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	f003 030c 	and.w	r3, r3, #12
 800a2de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a2e0:	4b56      	ldr	r3, [pc, #344]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	f003 0303 	and.w	r3, r3, #3
 800a2e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	2b0c      	cmp	r3, #12
 800a2ee:	d102      	bne.n	800a2f6 <HAL_RCC_OscConfig+0x136>
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d002      	beq.n	800a2fc <HAL_RCC_OscConfig+0x13c>
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	2b04      	cmp	r3, #4
 800a2fa:	d11f      	bne.n	800a33c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a2fc:	4b4f      	ldr	r3, [pc, #316]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a304:	2b00      	cmp	r3, #0
 800a306:	d005      	beq.n	800a314 <HAL_RCC_OscConfig+0x154>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d101      	bne.n	800a314 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	e25d      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a314:	4b49      	ldr	r3, [pc, #292]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	061b      	lsls	r3, r3, #24
 800a322:	4946      	ldr	r1, [pc, #280]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a324:	4313      	orrs	r3, r2
 800a326:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a328:	4b45      	ldr	r3, [pc, #276]	@ (800a440 <HAL_RCC_OscConfig+0x280>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fe fed1 	bl	80090d4 <HAL_InitTick>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d043      	beq.n	800a3c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	e249      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d023      	beq.n	800a38c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a344:	4b3d      	ldr	r3, [pc, #244]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a3c      	ldr	r2, [pc, #240]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a34a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a34e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a350:	f7fe ff0c 	bl	800916c <HAL_GetTick>
 800a354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a356:	e008      	b.n	800a36a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a358:	f7fe ff08 	bl	800916c <HAL_GetTick>
 800a35c:	4602      	mov	r2, r0
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	2b02      	cmp	r3, #2
 800a364:	d901      	bls.n	800a36a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a366:	2303      	movs	r3, #3
 800a368:	e232      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a36a:	4b34      	ldr	r3, [pc, #208]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a372:	2b00      	cmp	r3, #0
 800a374:	d0f0      	beq.n	800a358 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a376:	4b31      	ldr	r3, [pc, #196]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	061b      	lsls	r3, r3, #24
 800a384:	492d      	ldr	r1, [pc, #180]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a386:	4313      	orrs	r3, r2
 800a388:	604b      	str	r3, [r1, #4]
 800a38a:	e01a      	b.n	800a3c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a38c:	4b2b      	ldr	r3, [pc, #172]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a2a      	ldr	r2, [pc, #168]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a392:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a398:	f7fe fee8 	bl	800916c <HAL_GetTick>
 800a39c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a39e:	e008      	b.n	800a3b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3a0:	f7fe fee4 	bl	800916c <HAL_GetTick>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d901      	bls.n	800a3b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	e20e      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a3b2:	4b22      	ldr	r3, [pc, #136]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1f0      	bne.n	800a3a0 <HAL_RCC_OscConfig+0x1e0>
 800a3be:	e000      	b.n	800a3c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 0308 	and.w	r3, r3, #8
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d041      	beq.n	800a452 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d01c      	beq.n	800a410 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3d6:	4b19      	ldr	r3, [pc, #100]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a3d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3dc:	4a17      	ldr	r2, [pc, #92]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a3de:	f043 0301 	orr.w	r3, r3, #1
 800a3e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3e6:	f7fe fec1 	bl	800916c <HAL_GetTick>
 800a3ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a3ec:	e008      	b.n	800a400 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3ee:	f7fe febd 	bl	800916c <HAL_GetTick>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	d901      	bls.n	800a400 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e1e7      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a400:	4b0e      	ldr	r3, [pc, #56]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a406:	f003 0302 	and.w	r3, r3, #2
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d0ef      	beq.n	800a3ee <HAL_RCC_OscConfig+0x22e>
 800a40e:	e020      	b.n	800a452 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a410:	4b0a      	ldr	r3, [pc, #40]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a416:	4a09      	ldr	r2, [pc, #36]	@ (800a43c <HAL_RCC_OscConfig+0x27c>)
 800a418:	f023 0301 	bic.w	r3, r3, #1
 800a41c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a420:	f7fe fea4 	bl	800916c <HAL_GetTick>
 800a424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a426:	e00d      	b.n	800a444 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a428:	f7fe fea0 	bl	800916c <HAL_GetTick>
 800a42c:	4602      	mov	r2, r0
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	2b02      	cmp	r3, #2
 800a434:	d906      	bls.n	800a444 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a436:	2303      	movs	r3, #3
 800a438:	e1ca      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
 800a43a:	bf00      	nop
 800a43c:	40021000 	.word	0x40021000
 800a440:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a444:	4b8c      	ldr	r3, [pc, #560]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1ea      	bne.n	800a428 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 0304 	and.w	r3, r3, #4
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 80a6 	beq.w	800a5ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a460:	2300      	movs	r3, #0
 800a462:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a464:	4b84      	ldr	r3, [pc, #528]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <HAL_RCC_OscConfig+0x2b4>
 800a470:	2301      	movs	r3, #1
 800a472:	e000      	b.n	800a476 <HAL_RCC_OscConfig+0x2b6>
 800a474:	2300      	movs	r3, #0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00d      	beq.n	800a496 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a47a:	4b7f      	ldr	r3, [pc, #508]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a47c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a47e:	4a7e      	ldr	r2, [pc, #504]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a484:	6593      	str	r3, [r2, #88]	@ 0x58
 800a486:	4b7c      	ldr	r3, [pc, #496]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a48a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a48e:	60fb      	str	r3, [r7, #12]
 800a490:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a492:	2301      	movs	r3, #1
 800a494:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a496:	4b79      	ldr	r3, [pc, #484]	@ (800a67c <HAL_RCC_OscConfig+0x4bc>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d118      	bne.n	800a4d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a4a2:	4b76      	ldr	r3, [pc, #472]	@ (800a67c <HAL_RCC_OscConfig+0x4bc>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a75      	ldr	r2, [pc, #468]	@ (800a67c <HAL_RCC_OscConfig+0x4bc>)
 800a4a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a4ae:	f7fe fe5d 	bl	800916c <HAL_GetTick>
 800a4b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4b4:	e008      	b.n	800a4c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4b6:	f7fe fe59 	bl	800916c <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d901      	bls.n	800a4c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	e183      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4c8:	4b6c      	ldr	r3, [pc, #432]	@ (800a67c <HAL_RCC_OscConfig+0x4bc>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d0f0      	beq.n	800a4b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d108      	bne.n	800a4ee <HAL_RCC_OscConfig+0x32e>
 800a4dc:	4b66      	ldr	r3, [pc, #408]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a4de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4e2:	4a65      	ldr	r2, [pc, #404]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a4e4:	f043 0301 	orr.w	r3, r3, #1
 800a4e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a4ec:	e024      	b.n	800a538 <HAL_RCC_OscConfig+0x378>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	2b05      	cmp	r3, #5
 800a4f4:	d110      	bne.n	800a518 <HAL_RCC_OscConfig+0x358>
 800a4f6:	4b60      	ldr	r3, [pc, #384]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a4f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4fc:	4a5e      	ldr	r2, [pc, #376]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a4fe:	f043 0304 	orr.w	r3, r3, #4
 800a502:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a506:	4b5c      	ldr	r3, [pc, #368]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a50c:	4a5a      	ldr	r2, [pc, #360]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a50e:	f043 0301 	orr.w	r3, r3, #1
 800a512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a516:	e00f      	b.n	800a538 <HAL_RCC_OscConfig+0x378>
 800a518:	4b57      	ldr	r3, [pc, #348]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a51a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a51e:	4a56      	ldr	r2, [pc, #344]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a520:	f023 0301 	bic.w	r3, r3, #1
 800a524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a528:	4b53      	ldr	r3, [pc, #332]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a52a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a52e:	4a52      	ldr	r2, [pc, #328]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a530:	f023 0304 	bic.w	r3, r3, #4
 800a534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d016      	beq.n	800a56e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a540:	f7fe fe14 	bl	800916c <HAL_GetTick>
 800a544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a546:	e00a      	b.n	800a55e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a548:	f7fe fe10 	bl	800916c <HAL_GetTick>
 800a54c:	4602      	mov	r2, r0
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a556:	4293      	cmp	r3, r2
 800a558:	d901      	bls.n	800a55e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a55a:	2303      	movs	r3, #3
 800a55c:	e138      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a55e:	4b46      	ldr	r3, [pc, #280]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a564:	f003 0302 	and.w	r3, r3, #2
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d0ed      	beq.n	800a548 <HAL_RCC_OscConfig+0x388>
 800a56c:	e015      	b.n	800a59a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a56e:	f7fe fdfd 	bl	800916c <HAL_GetTick>
 800a572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a574:	e00a      	b.n	800a58c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a576:	f7fe fdf9 	bl	800916c <HAL_GetTick>
 800a57a:	4602      	mov	r2, r0
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a584:	4293      	cmp	r3, r2
 800a586:	d901      	bls.n	800a58c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a588:	2303      	movs	r3, #3
 800a58a:	e121      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a58c:	4b3a      	ldr	r3, [pc, #232]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a58e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a592:	f003 0302 	and.w	r3, r3, #2
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1ed      	bne.n	800a576 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a59a:	7ffb      	ldrb	r3, [r7, #31]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d105      	bne.n	800a5ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a5a0:	4b35      	ldr	r3, [pc, #212]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a5a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5a4:	4a34      	ldr	r2, [pc, #208]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a5a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a5aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 0320 	and.w	r3, r3, #32
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d03c      	beq.n	800a632 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d01c      	beq.n	800a5fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a5c0:	4b2d      	ldr	r3, [pc, #180]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a5c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a5c6:	4a2c      	ldr	r2, [pc, #176]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a5c8:	f043 0301 	orr.w	r3, r3, #1
 800a5cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5d0:	f7fe fdcc 	bl	800916c <HAL_GetTick>
 800a5d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a5d6:	e008      	b.n	800a5ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a5d8:	f7fe fdc8 	bl	800916c <HAL_GetTick>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d901      	bls.n	800a5ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	e0f2      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a5ea:	4b23      	ldr	r3, [pc, #140]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a5ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a5f0:	f003 0302 	and.w	r3, r3, #2
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d0ef      	beq.n	800a5d8 <HAL_RCC_OscConfig+0x418>
 800a5f8:	e01b      	b.n	800a632 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a5fa:	4b1f      	ldr	r3, [pc, #124]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a5fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a600:	4a1d      	ldr	r2, [pc, #116]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a602:	f023 0301 	bic.w	r3, r3, #1
 800a606:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a60a:	f7fe fdaf 	bl	800916c <HAL_GetTick>
 800a60e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a610:	e008      	b.n	800a624 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a612:	f7fe fdab 	bl	800916c <HAL_GetTick>
 800a616:	4602      	mov	r2, r0
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d901      	bls.n	800a624 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a620:	2303      	movs	r3, #3
 800a622:	e0d5      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a624:	4b14      	ldr	r3, [pc, #80]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a626:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a62a:	f003 0302 	and.w	r3, r3, #2
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1ef      	bne.n	800a612 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	69db      	ldr	r3, [r3, #28]
 800a636:	2b00      	cmp	r3, #0
 800a638:	f000 80c9 	beq.w	800a7ce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a63c:	4b0e      	ldr	r3, [pc, #56]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	f003 030c 	and.w	r3, r3, #12
 800a644:	2b0c      	cmp	r3, #12
 800a646:	f000 8083 	beq.w	800a750 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	2b02      	cmp	r3, #2
 800a650:	d15e      	bne.n	800a710 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a652:	4b09      	ldr	r3, [pc, #36]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a08      	ldr	r2, [pc, #32]	@ (800a678 <HAL_RCC_OscConfig+0x4b8>)
 800a658:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a65c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a65e:	f7fe fd85 	bl	800916c <HAL_GetTick>
 800a662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a664:	e00c      	b.n	800a680 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a666:	f7fe fd81 	bl	800916c <HAL_GetTick>
 800a66a:	4602      	mov	r2, r0
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	2b02      	cmp	r3, #2
 800a672:	d905      	bls.n	800a680 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a674:	2303      	movs	r3, #3
 800a676:	e0ab      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
 800a678:	40021000 	.word	0x40021000
 800a67c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a680:	4b55      	ldr	r3, [pc, #340]	@ (800a7d8 <HAL_RCC_OscConfig+0x618>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1ec      	bne.n	800a666 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a68c:	4b52      	ldr	r3, [pc, #328]	@ (800a7d8 <HAL_RCC_OscConfig+0x618>)
 800a68e:	68da      	ldr	r2, [r3, #12]
 800a690:	4b52      	ldr	r3, [pc, #328]	@ (800a7dc <HAL_RCC_OscConfig+0x61c>)
 800a692:	4013      	ands	r3, r2
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	6a11      	ldr	r1, [r2, #32]
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a69c:	3a01      	subs	r2, #1
 800a69e:	0112      	lsls	r2, r2, #4
 800a6a0:	4311      	orrs	r1, r2
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800a6a6:	0212      	lsls	r2, r2, #8
 800a6a8:	4311      	orrs	r1, r2
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a6ae:	0852      	lsrs	r2, r2, #1
 800a6b0:	3a01      	subs	r2, #1
 800a6b2:	0552      	lsls	r2, r2, #21
 800a6b4:	4311      	orrs	r1, r2
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a6ba:	0852      	lsrs	r2, r2, #1
 800a6bc:	3a01      	subs	r2, #1
 800a6be:	0652      	lsls	r2, r2, #25
 800a6c0:	4311      	orrs	r1, r2
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a6c6:	06d2      	lsls	r2, r2, #27
 800a6c8:	430a      	orrs	r2, r1
 800a6ca:	4943      	ldr	r1, [pc, #268]	@ (800a7d8 <HAL_RCC_OscConfig+0x618>)
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a6d0:	4b41      	ldr	r3, [pc, #260]	@ (800a7d8 <HAL_RCC_OscConfig+0x618>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a40      	ldr	r2, [pc, #256]	@ (800a7d8 <HAL_RCC_OscConfig+0x618>)
 800a6d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a6da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a6dc:	4b3e      	ldr	r3, [pc, #248]	@ (800a7d8 <HAL_RCC_OscConfig+0x618>)
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	4a3d      	ldr	r2, [pc, #244]	@ (800a7d8 <HAL_RCC_OscConfig+0x618>)
 800a6e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a6e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6e8:	f7fe fd40 	bl	800916c <HAL_GetTick>
 800a6ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a6ee:	e008      	b.n	800a702 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6f0:	f7fe fd3c 	bl	800916c <HAL_GetTick>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d901      	bls.n	800a702 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e066      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a702:	4b35      	ldr	r3, [pc, #212]	@ (800a7d8 <HAL_RCC_OscConfig+0x618>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d0f0      	beq.n	800a6f0 <HAL_RCC_OscConfig+0x530>
 800a70e:	e05e      	b.n	800a7ce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a710:	4b31      	ldr	r3, [pc, #196]	@ (800a7d8 <HAL_RCC_OscConfig+0x618>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a30      	ldr	r2, [pc, #192]	@ (800a7d8 <HAL_RCC_OscConfig+0x618>)
 800a716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a71a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a71c:	f7fe fd26 	bl	800916c <HAL_GetTick>
 800a720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a722:	e008      	b.n	800a736 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a724:	f7fe fd22 	bl	800916c <HAL_GetTick>
 800a728:	4602      	mov	r2, r0
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d901      	bls.n	800a736 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800a732:	2303      	movs	r3, #3
 800a734:	e04c      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a736:	4b28      	ldr	r3, [pc, #160]	@ (800a7d8 <HAL_RCC_OscConfig+0x618>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1f0      	bne.n	800a724 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a742:	4b25      	ldr	r3, [pc, #148]	@ (800a7d8 <HAL_RCC_OscConfig+0x618>)
 800a744:	68da      	ldr	r2, [r3, #12]
 800a746:	4924      	ldr	r1, [pc, #144]	@ (800a7d8 <HAL_RCC_OscConfig+0x618>)
 800a748:	4b25      	ldr	r3, [pc, #148]	@ (800a7e0 <HAL_RCC_OscConfig+0x620>)
 800a74a:	4013      	ands	r3, r2
 800a74c:	60cb      	str	r3, [r1, #12]
 800a74e:	e03e      	b.n	800a7ce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	69db      	ldr	r3, [r3, #28]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d101      	bne.n	800a75c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e039      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a75c:	4b1e      	ldr	r3, [pc, #120]	@ (800a7d8 <HAL_RCC_OscConfig+0x618>)
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	f003 0203 	and.w	r2, r3, #3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a1b      	ldr	r3, [r3, #32]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d12c      	bne.n	800a7ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a77a:	3b01      	subs	r3, #1
 800a77c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a77e:	429a      	cmp	r2, r3
 800a780:	d123      	bne.n	800a7ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a78c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a78e:	429a      	cmp	r2, r3
 800a790:	d11b      	bne.n	800a7ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a79c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d113      	bne.n	800a7ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ac:	085b      	lsrs	r3, r3, #1
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d109      	bne.n	800a7ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7c0:	085b      	lsrs	r3, r3, #1
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d001      	beq.n	800a7ce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e000      	b.n	800a7d0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3720      	adds	r7, #32
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	40021000 	.word	0x40021000
 800a7dc:	019f800c 	.word	0x019f800c
 800a7e0:	feeefffc 	.word	0xfeeefffc

0800a7e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b086      	sub	sp, #24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d101      	bne.n	800a7fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e11e      	b.n	800aa3a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a7fc:	4b91      	ldr	r3, [pc, #580]	@ (800aa44 <HAL_RCC_ClockConfig+0x260>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 030f 	and.w	r3, r3, #15
 800a804:	683a      	ldr	r2, [r7, #0]
 800a806:	429a      	cmp	r2, r3
 800a808:	d910      	bls.n	800a82c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a80a:	4b8e      	ldr	r3, [pc, #568]	@ (800aa44 <HAL_RCC_ClockConfig+0x260>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f023 020f 	bic.w	r2, r3, #15
 800a812:	498c      	ldr	r1, [pc, #560]	@ (800aa44 <HAL_RCC_ClockConfig+0x260>)
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	4313      	orrs	r3, r2
 800a818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a81a:	4b8a      	ldr	r3, [pc, #552]	@ (800aa44 <HAL_RCC_ClockConfig+0x260>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 030f 	and.w	r3, r3, #15
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	429a      	cmp	r2, r3
 800a826:	d001      	beq.n	800a82c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	e106      	b.n	800aa3a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 0301 	and.w	r3, r3, #1
 800a834:	2b00      	cmp	r3, #0
 800a836:	d073      	beq.n	800a920 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	2b03      	cmp	r3, #3
 800a83e:	d129      	bne.n	800a894 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a840:	4b81      	ldr	r3, [pc, #516]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e0f4      	b.n	800aa3a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a850:	f000 f99e 	bl	800ab90 <RCC_GetSysClockFreqFromPLLSource>
 800a854:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	4a7c      	ldr	r2, [pc, #496]	@ (800aa4c <HAL_RCC_ClockConfig+0x268>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d93f      	bls.n	800a8de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a85e:	4b7a      	ldr	r3, [pc, #488]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d009      	beq.n	800a87e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a872:	2b00      	cmp	r3, #0
 800a874:	d033      	beq.n	800a8de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d12f      	bne.n	800a8de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a87e:	4b72      	ldr	r3, [pc, #456]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a886:	4a70      	ldr	r2, [pc, #448]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a88c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a88e:	2380      	movs	r3, #128	@ 0x80
 800a890:	617b      	str	r3, [r7, #20]
 800a892:	e024      	b.n	800a8de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d107      	bne.n	800a8ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a89c:	4b6a      	ldr	r3, [pc, #424]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d109      	bne.n	800a8bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e0c6      	b.n	800aa3a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a8ac:	4b66      	ldr	r3, [pc, #408]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d101      	bne.n	800a8bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e0be      	b.n	800aa3a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a8bc:	f000 f8ce 	bl	800aa5c <HAL_RCC_GetSysClockFreq>
 800a8c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	4a61      	ldr	r2, [pc, #388]	@ (800aa4c <HAL_RCC_ClockConfig+0x268>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d909      	bls.n	800a8de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a8ca:	4b5f      	ldr	r3, [pc, #380]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a8d2:	4a5d      	ldr	r2, [pc, #372]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a8d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a8da:	2380      	movs	r3, #128	@ 0x80
 800a8dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a8de:	4b5a      	ldr	r3, [pc, #360]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	f023 0203 	bic.w	r2, r3, #3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	4957      	ldr	r1, [pc, #348]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8f0:	f7fe fc3c 	bl	800916c <HAL_GetTick>
 800a8f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a8f6:	e00a      	b.n	800a90e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a8f8:	f7fe fc38 	bl	800916c <HAL_GetTick>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	1ad3      	subs	r3, r2, r3
 800a902:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a906:	4293      	cmp	r3, r2
 800a908:	d901      	bls.n	800a90e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	e095      	b.n	800aa3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a90e:	4b4e      	ldr	r3, [pc, #312]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f003 020c 	and.w	r2, r3, #12
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d1eb      	bne.n	800a8f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 0302 	and.w	r3, r3, #2
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d023      	beq.n	800a974 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 0304 	and.w	r3, r3, #4
 800a934:	2b00      	cmp	r3, #0
 800a936:	d005      	beq.n	800a944 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a938:	4b43      	ldr	r3, [pc, #268]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	4a42      	ldr	r2, [pc, #264]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a93e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a942:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0308 	and.w	r3, r3, #8
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d007      	beq.n	800a960 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a950:	4b3d      	ldr	r3, [pc, #244]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a958:	4a3b      	ldr	r2, [pc, #236]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a95a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a95e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a960:	4b39      	ldr	r3, [pc, #228]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	4936      	ldr	r1, [pc, #216]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a96e:	4313      	orrs	r3, r2
 800a970:	608b      	str	r3, [r1, #8]
 800a972:	e008      	b.n	800a986 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	2b80      	cmp	r3, #128	@ 0x80
 800a978:	d105      	bne.n	800a986 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a97a:	4b33      	ldr	r3, [pc, #204]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	4a32      	ldr	r2, [pc, #200]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a980:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a984:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a986:	4b2f      	ldr	r3, [pc, #188]	@ (800aa44 <HAL_RCC_ClockConfig+0x260>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 030f 	and.w	r3, r3, #15
 800a98e:	683a      	ldr	r2, [r7, #0]
 800a990:	429a      	cmp	r2, r3
 800a992:	d21d      	bcs.n	800a9d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a994:	4b2b      	ldr	r3, [pc, #172]	@ (800aa44 <HAL_RCC_ClockConfig+0x260>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f023 020f 	bic.w	r2, r3, #15
 800a99c:	4929      	ldr	r1, [pc, #164]	@ (800aa44 <HAL_RCC_ClockConfig+0x260>)
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a9a4:	f7fe fbe2 	bl	800916c <HAL_GetTick>
 800a9a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9aa:	e00a      	b.n	800a9c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9ac:	f7fe fbde 	bl	800916c <HAL_GetTick>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d901      	bls.n	800a9c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a9be:	2303      	movs	r3, #3
 800a9c0:	e03b      	b.n	800aa3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9c2:	4b20      	ldr	r3, [pc, #128]	@ (800aa44 <HAL_RCC_ClockConfig+0x260>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 030f 	and.w	r3, r3, #15
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d1ed      	bne.n	800a9ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0304 	and.w	r3, r3, #4
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d008      	beq.n	800a9ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9dc:	4b1a      	ldr	r3, [pc, #104]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	4917      	ldr	r1, [pc, #92]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f003 0308 	and.w	r3, r3, #8
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d009      	beq.n	800aa0e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a9fa:	4b13      	ldr	r3, [pc, #76]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	00db      	lsls	r3, r3, #3
 800aa08:	490f      	ldr	r1, [pc, #60]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aa0e:	f000 f825 	bl	800aa5c <HAL_RCC_GetSysClockFreq>
 800aa12:	4602      	mov	r2, r0
 800aa14:	4b0c      	ldr	r3, [pc, #48]	@ (800aa48 <HAL_RCC_ClockConfig+0x264>)
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	091b      	lsrs	r3, r3, #4
 800aa1a:	f003 030f 	and.w	r3, r3, #15
 800aa1e:	490c      	ldr	r1, [pc, #48]	@ (800aa50 <HAL_RCC_ClockConfig+0x26c>)
 800aa20:	5ccb      	ldrb	r3, [r1, r3]
 800aa22:	f003 031f 	and.w	r3, r3, #31
 800aa26:	fa22 f303 	lsr.w	r3, r2, r3
 800aa2a:	4a0a      	ldr	r2, [pc, #40]	@ (800aa54 <HAL_RCC_ClockConfig+0x270>)
 800aa2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800aa2e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa58 <HAL_RCC_ClockConfig+0x274>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fe fb4e 	bl	80090d4 <HAL_InitTick>
 800aa38:	4603      	mov	r3, r0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	40022000 	.word	0x40022000
 800aa48:	40021000 	.word	0x40021000
 800aa4c:	04c4b400 	.word	0x04c4b400
 800aa50:	0800c08c 	.word	0x0800c08c
 800aa54:	20000000 	.word	0x20000000
 800aa58:	20000004 	.word	0x20000004

0800aa5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b087      	sub	sp, #28
 800aa60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800aa62:	4b2c      	ldr	r3, [pc, #176]	@ (800ab14 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	f003 030c 	and.w	r3, r3, #12
 800aa6a:	2b04      	cmp	r3, #4
 800aa6c:	d102      	bne.n	800aa74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800aa6e:	4b2a      	ldr	r3, [pc, #168]	@ (800ab18 <HAL_RCC_GetSysClockFreq+0xbc>)
 800aa70:	613b      	str	r3, [r7, #16]
 800aa72:	e047      	b.n	800ab04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800aa74:	4b27      	ldr	r3, [pc, #156]	@ (800ab14 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	f003 030c 	and.w	r3, r3, #12
 800aa7c:	2b08      	cmp	r3, #8
 800aa7e:	d102      	bne.n	800aa86 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800aa80:	4b26      	ldr	r3, [pc, #152]	@ (800ab1c <HAL_RCC_GetSysClockFreq+0xc0>)
 800aa82:	613b      	str	r3, [r7, #16]
 800aa84:	e03e      	b.n	800ab04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800aa86:	4b23      	ldr	r3, [pc, #140]	@ (800ab14 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	f003 030c 	and.w	r3, r3, #12
 800aa8e:	2b0c      	cmp	r3, #12
 800aa90:	d136      	bne.n	800ab00 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800aa92:	4b20      	ldr	r3, [pc, #128]	@ (800ab14 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	f003 0303 	and.w	r3, r3, #3
 800aa9a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800aa9c:	4b1d      	ldr	r3, [pc, #116]	@ (800ab14 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	091b      	lsrs	r3, r3, #4
 800aaa2:	f003 030f 	and.w	r3, r3, #15
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2b03      	cmp	r3, #3
 800aaae:	d10c      	bne.n	800aaca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800aab0:	4a1a      	ldr	r2, [pc, #104]	@ (800ab1c <HAL_RCC_GetSysClockFreq+0xc0>)
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aab8:	4a16      	ldr	r2, [pc, #88]	@ (800ab14 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aaba:	68d2      	ldr	r2, [r2, #12]
 800aabc:	0a12      	lsrs	r2, r2, #8
 800aabe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800aac2:	fb02 f303 	mul.w	r3, r2, r3
 800aac6:	617b      	str	r3, [r7, #20]
      break;
 800aac8:	e00c      	b.n	800aae4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800aaca:	4a13      	ldr	r2, [pc, #76]	@ (800ab18 <HAL_RCC_GetSysClockFreq+0xbc>)
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	fbb2 f3f3 	udiv	r3, r2, r3
 800aad2:	4a10      	ldr	r2, [pc, #64]	@ (800ab14 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aad4:	68d2      	ldr	r2, [r2, #12]
 800aad6:	0a12      	lsrs	r2, r2, #8
 800aad8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800aadc:	fb02 f303 	mul.w	r3, r2, r3
 800aae0:	617b      	str	r3, [r7, #20]
      break;
 800aae2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800aae4:	4b0b      	ldr	r3, [pc, #44]	@ (800ab14 <HAL_RCC_GetSysClockFreq+0xb8>)
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	0e5b      	lsrs	r3, r3, #25
 800aaea:	f003 0303 	and.w	r3, r3, #3
 800aaee:	3301      	adds	r3, #1
 800aaf0:	005b      	lsls	r3, r3, #1
 800aaf2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aafc:	613b      	str	r3, [r7, #16]
 800aafe:	e001      	b.n	800ab04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800ab00:	2300      	movs	r3, #0
 800ab02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800ab04:	693b      	ldr	r3, [r7, #16]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	371c      	adds	r7, #28
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	40021000 	.word	0x40021000
 800ab18:	00f42400 	.word	0x00f42400
 800ab1c:	016e3600 	.word	0x016e3600

0800ab20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab20:	b480      	push	{r7}
 800ab22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab24:	4b03      	ldr	r3, [pc, #12]	@ (800ab34 <HAL_RCC_GetHCLKFreq+0x14>)
 800ab26:	681b      	ldr	r3, [r3, #0]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	20000000 	.word	0x20000000

0800ab38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ab3c:	f7ff fff0 	bl	800ab20 <HAL_RCC_GetHCLKFreq>
 800ab40:	4602      	mov	r2, r0
 800ab42:	4b06      	ldr	r3, [pc, #24]	@ (800ab5c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	0a1b      	lsrs	r3, r3, #8
 800ab48:	f003 0307 	and.w	r3, r3, #7
 800ab4c:	4904      	ldr	r1, [pc, #16]	@ (800ab60 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ab4e:	5ccb      	ldrb	r3, [r1, r3]
 800ab50:	f003 031f 	and.w	r3, r3, #31
 800ab54:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	40021000 	.word	0x40021000
 800ab60:	0800c09c 	.word	0x0800c09c

0800ab64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ab68:	f7ff ffda 	bl	800ab20 <HAL_RCC_GetHCLKFreq>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	4b06      	ldr	r3, [pc, #24]	@ (800ab88 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	0adb      	lsrs	r3, r3, #11
 800ab74:	f003 0307 	and.w	r3, r3, #7
 800ab78:	4904      	ldr	r1, [pc, #16]	@ (800ab8c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ab7a:	5ccb      	ldrb	r3, [r1, r3]
 800ab7c:	f003 031f 	and.w	r3, r3, #31
 800ab80:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	40021000 	.word	0x40021000
 800ab8c:	0800c09c 	.word	0x0800c09c

0800ab90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b087      	sub	sp, #28
 800ab94:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ab96:	4b1e      	ldr	r3, [pc, #120]	@ (800ac10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	f003 0303 	and.w	r3, r3, #3
 800ab9e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800aba0:	4b1b      	ldr	r3, [pc, #108]	@ (800ac10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	091b      	lsrs	r3, r3, #4
 800aba6:	f003 030f 	and.w	r3, r3, #15
 800abaa:	3301      	adds	r3, #1
 800abac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	2b03      	cmp	r3, #3
 800abb2:	d10c      	bne.n	800abce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800abb4:	4a17      	ldr	r2, [pc, #92]	@ (800ac14 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800abbc:	4a14      	ldr	r2, [pc, #80]	@ (800ac10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800abbe:	68d2      	ldr	r2, [r2, #12]
 800abc0:	0a12      	lsrs	r2, r2, #8
 800abc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800abc6:	fb02 f303 	mul.w	r3, r2, r3
 800abca:	617b      	str	r3, [r7, #20]
    break;
 800abcc:	e00c      	b.n	800abe8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800abce:	4a12      	ldr	r2, [pc, #72]	@ (800ac18 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800abd6:	4a0e      	ldr	r2, [pc, #56]	@ (800ac10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800abd8:	68d2      	ldr	r2, [r2, #12]
 800abda:	0a12      	lsrs	r2, r2, #8
 800abdc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800abe0:	fb02 f303 	mul.w	r3, r2, r3
 800abe4:	617b      	str	r3, [r7, #20]
    break;
 800abe6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800abe8:	4b09      	ldr	r3, [pc, #36]	@ (800ac10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	0e5b      	lsrs	r3, r3, #25
 800abee:	f003 0303 	and.w	r3, r3, #3
 800abf2:	3301      	adds	r3, #1
 800abf4:	005b      	lsls	r3, r3, #1
 800abf6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac00:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800ac02:	687b      	ldr	r3, [r7, #4]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	371c      	adds	r7, #28
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr
 800ac10:	40021000 	.word	0x40021000
 800ac14:	016e3600 	.word	0x016e3600
 800ac18:	00f42400 	.word	0x00f42400

0800ac1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b086      	sub	sp, #24
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ac24:	2300      	movs	r3, #0
 800ac26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ac28:	2300      	movs	r3, #0
 800ac2a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f000 8098 	beq.w	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac3e:	4b43      	ldr	r3, [pc, #268]	@ (800ad4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ac40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10d      	bne.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac4a:	4b40      	ldr	r3, [pc, #256]	@ (800ad4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ac4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac4e:	4a3f      	ldr	r2, [pc, #252]	@ (800ad4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ac50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac54:	6593      	str	r3, [r2, #88]	@ 0x58
 800ac56:	4b3d      	ldr	r3, [pc, #244]	@ (800ad4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ac58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac5e:	60bb      	str	r3, [r7, #8]
 800ac60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac62:	2301      	movs	r3, #1
 800ac64:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac66:	4b3a      	ldr	r3, [pc, #232]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a39      	ldr	r2, [pc, #228]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ac6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac72:	f7fe fa7b 	bl	800916c <HAL_GetTick>
 800ac76:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac78:	e009      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac7a:	f7fe fa77 	bl	800916c <HAL_GetTick>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d902      	bls.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	74fb      	strb	r3, [r7, #19]
        break;
 800ac8c:	e005      	b.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac8e:	4b30      	ldr	r3, [pc, #192]	@ (800ad50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d0ef      	beq.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800ac9a:	7cfb      	ldrb	r3, [r7, #19]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d159      	bne.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800aca0:	4b2a      	ldr	r3, [pc, #168]	@ (800ad4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acaa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d01e      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acb6:	697a      	ldr	r2, [r7, #20]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d019      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800acbc:	4b23      	ldr	r3, [pc, #140]	@ (800ad4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800acbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800acc8:	4b20      	ldr	r3, [pc, #128]	@ (800ad4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800acca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acce:	4a1f      	ldr	r2, [pc, #124]	@ (800ad4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800acd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800acd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800acd8:	4b1c      	ldr	r3, [pc, #112]	@ (800ad4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800acda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acde:	4a1b      	ldr	r2, [pc, #108]	@ (800ad4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ace0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ace4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ace8:	4a18      	ldr	r2, [pc, #96]	@ (800ad4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d016      	beq.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acfa:	f7fe fa37 	bl	800916c <HAL_GetTick>
 800acfe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad00:	e00b      	b.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad02:	f7fe fa33 	bl	800916c <HAL_GetTick>
 800ad06:	4602      	mov	r2, r0
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d902      	bls.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800ad14:	2303      	movs	r3, #3
 800ad16:	74fb      	strb	r3, [r7, #19]
            break;
 800ad18:	e006      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad20:	f003 0302 	and.w	r3, r3, #2
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d0ec      	beq.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800ad28:	7cfb      	ldrb	r3, [r7, #19]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10b      	bne.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad2e:	4b07      	ldr	r3, [pc, #28]	@ (800ad4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad3c:	4903      	ldr	r1, [pc, #12]	@ (800ad4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800ad44:	e008      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ad46:	7cfb      	ldrb	r3, [r7, #19]
 800ad48:	74bb      	strb	r3, [r7, #18]
 800ad4a:	e005      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ad4c:	40021000 	.word	0x40021000
 800ad50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad54:	7cfb      	ldrb	r3, [r7, #19]
 800ad56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ad58:	7c7b      	ldrb	r3, [r7, #17]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d105      	bne.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad5e:	4ba7      	ldr	r3, [pc, #668]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad62:	4aa6      	ldr	r2, [pc, #664]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00a      	beq.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ad76:	4ba1      	ldr	r3, [pc, #644]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad7c:	f023 0203 	bic.w	r2, r3, #3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	499d      	ldr	r1, [pc, #628]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad86:	4313      	orrs	r3, r2
 800ad88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f003 0302 	and.w	r3, r3, #2
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00a      	beq.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ad98:	4b98      	ldr	r3, [pc, #608]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad9e:	f023 020c 	bic.w	r2, r3, #12
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	4995      	ldr	r1, [pc, #596]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ada8:	4313      	orrs	r3, r2
 800adaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f003 0304 	and.w	r3, r3, #4
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00a      	beq.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800adba:	4b90      	ldr	r3, [pc, #576]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	498c      	ldr	r1, [pc, #560]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adca:	4313      	orrs	r3, r2
 800adcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f003 0308 	and.w	r3, r3, #8
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00a      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800addc:	4b87      	ldr	r3, [pc, #540]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ade2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	4984      	ldr	r1, [pc, #528]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adec:	4313      	orrs	r3, r2
 800adee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 0310 	and.w	r3, r3, #16
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00a      	beq.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800adfe:	4b7f      	ldr	r3, [pc, #508]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	695b      	ldr	r3, [r3, #20]
 800ae0c:	497b      	ldr	r1, [pc, #492]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 0320 	and.w	r3, r3, #32
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00a      	beq.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ae20:	4b76      	ldr	r3, [pc, #472]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	4973      	ldr	r1, [pc, #460]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae30:	4313      	orrs	r3, r2
 800ae32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00a      	beq.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ae42:	4b6e      	ldr	r3, [pc, #440]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae48:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	69db      	ldr	r3, [r3, #28]
 800ae50:	496a      	ldr	r1, [pc, #424]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae52:	4313      	orrs	r3, r2
 800ae54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00a      	beq.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ae64:	4b65      	ldr	r3, [pc, #404]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae6a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a1b      	ldr	r3, [r3, #32]
 800ae72:	4962      	ldr	r1, [pc, #392]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae74:	4313      	orrs	r3, r2
 800ae76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00a      	beq.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ae86:	4b5d      	ldr	r3, [pc, #372]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae94:	4959      	ldr	r1, [pc, #356]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ae96:	4313      	orrs	r3, r2
 800ae98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00a      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aea8:	4b54      	ldr	r3, [pc, #336]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aeaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeae:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb6:	4951      	ldr	r1, [pc, #324]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d015      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aeca:	4b4c      	ldr	r3, [pc, #304]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aed0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed8:	4948      	ldr	r1, [pc, #288]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aeda:	4313      	orrs	r3, r2
 800aedc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aee8:	d105      	bne.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aeea:	4b44      	ldr	r3, [pc, #272]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	4a43      	ldr	r2, [pc, #268]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aef0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aef4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d015      	beq.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800af02:	4b3e      	ldr	r3, [pc, #248]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af08:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af10:	493a      	ldr	r1, [pc, #232]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af12:	4313      	orrs	r3, r2
 800af14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800af20:	d105      	bne.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af22:	4b36      	ldr	r3, [pc, #216]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	4a35      	ldr	r2, [pc, #212]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af2c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800af36:	2b00      	cmp	r3, #0
 800af38:	d015      	beq.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800af3a:	4b30      	ldr	r3, [pc, #192]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af40:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af48:	492c      	ldr	r1, [pc, #176]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af4a:	4313      	orrs	r3, r2
 800af4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af58:	d105      	bne.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af5a:	4b28      	ldr	r3, [pc, #160]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	4a27      	ldr	r2, [pc, #156]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af64:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d015      	beq.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800af72:	4b22      	ldr	r3, [pc, #136]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af78:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af80:	491e      	ldr	r1, [pc, #120]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af82:	4313      	orrs	r3, r2
 800af84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af90:	d105      	bne.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af92:	4b1a      	ldr	r3, [pc, #104]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	4a19      	ldr	r2, [pc, #100]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af9c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d015      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800afaa:	4b14      	ldr	r3, [pc, #80]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800afac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afb0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afb8:	4910      	ldr	r1, [pc, #64]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800afba:	4313      	orrs	r3, r2
 800afbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800afc8:	d105      	bne.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800afca:	4b0c      	ldr	r3, [pc, #48]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	4a0b      	ldr	r2, [pc, #44]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800afd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800afd4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d018      	beq.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800afe2:	4b06      	ldr	r3, [pc, #24]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800afe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afe8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff0:	4902      	ldr	r1, [pc, #8]	@ (800affc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aff2:	4313      	orrs	r3, r2
 800aff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	e001      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800affc:	40021000 	.word	0x40021000
 800b000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b002:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b006:	d105      	bne.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b008:	4b21      	ldr	r3, [pc, #132]	@ (800b090 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	4a20      	ldr	r2, [pc, #128]	@ (800b090 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b00e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b012:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d015      	beq.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b020:	4b1b      	ldr	r3, [pc, #108]	@ (800b090 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b026:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b02e:	4918      	ldr	r1, [pc, #96]	@ (800b090 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b030:	4313      	orrs	r3, r2
 800b032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b03a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b03e:	d105      	bne.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b040:	4b13      	ldr	r3, [pc, #76]	@ (800b090 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	4a12      	ldr	r2, [pc, #72]	@ (800b090 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b046:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b04a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b054:	2b00      	cmp	r3, #0
 800b056:	d015      	beq.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b058:	4b0d      	ldr	r3, [pc, #52]	@ (800b090 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b05a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b05e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b066:	490a      	ldr	r1, [pc, #40]	@ (800b090 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b068:	4313      	orrs	r3, r2
 800b06a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b072:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b076:	d105      	bne.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b078:	4b05      	ldr	r3, [pc, #20]	@ (800b090 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	4a04      	ldr	r2, [pc, #16]	@ (800b090 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b07e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b082:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b084:	7cbb      	ldrb	r3, [r7, #18]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3718      	adds	r7, #24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	40021000 	.word	0x40021000

0800b094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e042      	b.n	800b12c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d106      	bne.n	800b0be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7fd ff1f 	bl	8008efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2224      	movs	r2, #36	@ 0x24
 800b0c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f022 0201 	bic.w	r2, r2, #1
 800b0d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d002      	beq.n	800b0e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 fc7a 	bl	800b9d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f97b 	bl	800b3e0 <UART_SetConfig>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d101      	bne.n	800b0f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e01b      	b.n	800b12c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	685a      	ldr	r2, [r3, #4]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	689a      	ldr	r2, [r3, #8]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f042 0201 	orr.w	r2, r2, #1
 800b122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fcf9 	bl	800bb1c <UART_CheckIdleState>
 800b12a:	4603      	mov	r3, r0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b08a      	sub	sp, #40	@ 0x28
 800b138:	af02      	add	r7, sp, #8
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	603b      	str	r3, [r7, #0]
 800b140:	4613      	mov	r3, r2
 800b142:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b14a:	2b20      	cmp	r3, #32
 800b14c:	d17b      	bne.n	800b246 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d002      	beq.n	800b15a <HAL_UART_Transmit+0x26>
 800b154:	88fb      	ldrh	r3, [r7, #6]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d101      	bne.n	800b15e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	e074      	b.n	800b248 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2200      	movs	r2, #0
 800b162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2221      	movs	r2, #33	@ 0x21
 800b16a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b16e:	f7fd fffd 	bl	800916c <HAL_GetTick>
 800b172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	88fa      	ldrh	r2, [r7, #6]
 800b178:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	88fa      	ldrh	r2, [r7, #6]
 800b180:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b18c:	d108      	bne.n	800b1a0 <HAL_UART_Transmit+0x6c>
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d104      	bne.n	800b1a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b196:	2300      	movs	r3, #0
 800b198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	61bb      	str	r3, [r7, #24]
 800b19e:	e003      	b.n	800b1a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b1a8:	e030      	b.n	800b20c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	2180      	movs	r1, #128	@ 0x80
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	f000 fd5b 	bl	800bc70 <UART_WaitOnFlagUntilTimeout>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d005      	beq.n	800b1cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2220      	movs	r2, #32
 800b1c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b1c8:	2303      	movs	r3, #3
 800b1ca:	e03d      	b.n	800b248 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10b      	bne.n	800b1ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	3302      	adds	r3, #2
 800b1e6:	61bb      	str	r3, [r7, #24]
 800b1e8:	e007      	b.n	800b1fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	781a      	ldrb	r2, [r3, #0]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b200:	b29b      	uxth	r3, r3
 800b202:	3b01      	subs	r3, #1
 800b204:	b29a      	uxth	r2, r3
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b212:	b29b      	uxth	r3, r3
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1c8      	bne.n	800b1aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	2200      	movs	r2, #0
 800b220:	2140      	movs	r1, #64	@ 0x40
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f000 fd24 	bl	800bc70 <UART_WaitOnFlagUntilTimeout>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d005      	beq.n	800b23a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2220      	movs	r2, #32
 800b232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b236:	2303      	movs	r3, #3
 800b238:	e006      	b.n	800b248 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2220      	movs	r2, #32
 800b23e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b242:	2300      	movs	r3, #0
 800b244:	e000      	b.n	800b248 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b246:	2302      	movs	r3, #2
  }
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3720      	adds	r7, #32
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b08a      	sub	sp, #40	@ 0x28
 800b254:	af02      	add	r7, sp, #8
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	603b      	str	r3, [r7, #0]
 800b25c:	4613      	mov	r3, r2
 800b25e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b266:	2b20      	cmp	r3, #32
 800b268:	f040 80b5 	bne.w	800b3d6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d002      	beq.n	800b278 <HAL_UART_Receive+0x28>
 800b272:	88fb      	ldrh	r3, [r7, #6]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d101      	bne.n	800b27c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b278:	2301      	movs	r3, #1
 800b27a:	e0ad      	b.n	800b3d8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2222      	movs	r2, #34	@ 0x22
 800b288:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b292:	f7fd ff6b 	bl	800916c <HAL_GetTick>
 800b296:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	88fa      	ldrh	r2, [r7, #6]
 800b29c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	88fa      	ldrh	r2, [r7, #6]
 800b2a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2b0:	d10e      	bne.n	800b2d0 <HAL_UART_Receive+0x80>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d105      	bne.n	800b2c6 <HAL_UART_Receive+0x76>
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b2c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b2c4:	e02d      	b.n	800b322 <HAL_UART_Receive+0xd2>
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	22ff      	movs	r2, #255	@ 0xff
 800b2ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b2ce:	e028      	b.n	800b322 <HAL_UART_Receive+0xd2>
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10d      	bne.n	800b2f4 <HAL_UART_Receive+0xa4>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d104      	bne.n	800b2ea <HAL_UART_Receive+0x9a>
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	22ff      	movs	r2, #255	@ 0xff
 800b2e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b2e8:	e01b      	b.n	800b322 <HAL_UART_Receive+0xd2>
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	227f      	movs	r2, #127	@ 0x7f
 800b2ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b2f2:	e016      	b.n	800b322 <HAL_UART_Receive+0xd2>
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2fc:	d10d      	bne.n	800b31a <HAL_UART_Receive+0xca>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d104      	bne.n	800b310 <HAL_UART_Receive+0xc0>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	227f      	movs	r2, #127	@ 0x7f
 800b30a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b30e:	e008      	b.n	800b322 <HAL_UART_Receive+0xd2>
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	223f      	movs	r2, #63	@ 0x3f
 800b314:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b318:	e003      	b.n	800b322 <HAL_UART_Receive+0xd2>
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b328:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b332:	d108      	bne.n	800b346 <HAL_UART_Receive+0xf6>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d104      	bne.n	800b346 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800b33c:	2300      	movs	r3, #0
 800b33e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	61bb      	str	r3, [r7, #24]
 800b344:	e003      	b.n	800b34e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b34a:	2300      	movs	r3, #0
 800b34c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b34e:	e036      	b.n	800b3be <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	2200      	movs	r2, #0
 800b358:	2120      	movs	r1, #32
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f000 fc88 	bl	800bc70 <UART_WaitOnFlagUntilTimeout>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d005      	beq.n	800b372 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2220      	movs	r2, #32
 800b36a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800b36e:	2303      	movs	r3, #3
 800b370:	e032      	b.n	800b3d8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d10c      	bne.n	800b392 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b37e:	b29a      	uxth	r2, r3
 800b380:	8a7b      	ldrh	r3, [r7, #18]
 800b382:	4013      	ands	r3, r2
 800b384:	b29a      	uxth	r2, r3
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	3302      	adds	r3, #2
 800b38e:	61bb      	str	r3, [r7, #24]
 800b390:	e00c      	b.n	800b3ac <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b398:	b2da      	uxtb	r2, r3
 800b39a:	8a7b      	ldrh	r3, [r7, #18]
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	4013      	ands	r3, r2
 800b3a0:	b2da      	uxtb	r2, r3
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	b29a      	uxth	r2, r3
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1c2      	bne.n	800b350 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2220      	movs	r2, #32
 800b3ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	e000      	b.n	800b3d8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800b3d6:	2302      	movs	r3, #2
  }
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3720      	adds	r7, #32
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3e4:	b08c      	sub	sp, #48	@ 0x30
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	689a      	ldr	r2, [r3, #8]
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	691b      	ldr	r3, [r3, #16]
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	695b      	ldr	r3, [r3, #20]
 800b3fe:	431a      	orrs	r2, r3
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	69db      	ldr	r3, [r3, #28]
 800b404:	4313      	orrs	r3, r2
 800b406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	4baa      	ldr	r3, [pc, #680]	@ (800b6b8 <UART_SetConfig+0x2d8>)
 800b410:	4013      	ands	r3, r2
 800b412:	697a      	ldr	r2, [r7, #20]
 800b414:	6812      	ldr	r2, [r2, #0]
 800b416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b418:	430b      	orrs	r3, r1
 800b41a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	68da      	ldr	r2, [r3, #12]
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	430a      	orrs	r2, r1
 800b430:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a9f      	ldr	r2, [pc, #636]	@ (800b6bc <UART_SetConfig+0x2dc>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d004      	beq.n	800b44c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	6a1b      	ldr	r3, [r3, #32]
 800b446:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b448:	4313      	orrs	r3, r2
 800b44a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b456:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b45a:	697a      	ldr	r2, [r7, #20]
 800b45c:	6812      	ldr	r2, [r2, #0]
 800b45e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b460:	430b      	orrs	r3, r1
 800b462:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46a:	f023 010f 	bic.w	r1, r3, #15
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	430a      	orrs	r2, r1
 800b478:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a90      	ldr	r2, [pc, #576]	@ (800b6c0 <UART_SetConfig+0x2e0>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d125      	bne.n	800b4d0 <UART_SetConfig+0xf0>
 800b484:	4b8f      	ldr	r3, [pc, #572]	@ (800b6c4 <UART_SetConfig+0x2e4>)
 800b486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b48a:	f003 0303 	and.w	r3, r3, #3
 800b48e:	2b03      	cmp	r3, #3
 800b490:	d81a      	bhi.n	800b4c8 <UART_SetConfig+0xe8>
 800b492:	a201      	add	r2, pc, #4	@ (adr r2, 800b498 <UART_SetConfig+0xb8>)
 800b494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b498:	0800b4a9 	.word	0x0800b4a9
 800b49c:	0800b4b9 	.word	0x0800b4b9
 800b4a0:	0800b4b1 	.word	0x0800b4b1
 800b4a4:	0800b4c1 	.word	0x0800b4c1
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4ae:	e116      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4b6:	e112      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b4b8:	2304      	movs	r3, #4
 800b4ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4be:	e10e      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b4c0:	2308      	movs	r3, #8
 800b4c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4c6:	e10a      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b4c8:	2310      	movs	r3, #16
 800b4ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4ce:	e106      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a7c      	ldr	r2, [pc, #496]	@ (800b6c8 <UART_SetConfig+0x2e8>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d138      	bne.n	800b54c <UART_SetConfig+0x16c>
 800b4da:	4b7a      	ldr	r3, [pc, #488]	@ (800b6c4 <UART_SetConfig+0x2e4>)
 800b4dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4e0:	f003 030c 	and.w	r3, r3, #12
 800b4e4:	2b0c      	cmp	r3, #12
 800b4e6:	d82d      	bhi.n	800b544 <UART_SetConfig+0x164>
 800b4e8:	a201      	add	r2, pc, #4	@ (adr r2, 800b4f0 <UART_SetConfig+0x110>)
 800b4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ee:	bf00      	nop
 800b4f0:	0800b525 	.word	0x0800b525
 800b4f4:	0800b545 	.word	0x0800b545
 800b4f8:	0800b545 	.word	0x0800b545
 800b4fc:	0800b545 	.word	0x0800b545
 800b500:	0800b535 	.word	0x0800b535
 800b504:	0800b545 	.word	0x0800b545
 800b508:	0800b545 	.word	0x0800b545
 800b50c:	0800b545 	.word	0x0800b545
 800b510:	0800b52d 	.word	0x0800b52d
 800b514:	0800b545 	.word	0x0800b545
 800b518:	0800b545 	.word	0x0800b545
 800b51c:	0800b545 	.word	0x0800b545
 800b520:	0800b53d 	.word	0x0800b53d
 800b524:	2300      	movs	r3, #0
 800b526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b52a:	e0d8      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b52c:	2302      	movs	r3, #2
 800b52e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b532:	e0d4      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b534:	2304      	movs	r3, #4
 800b536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b53a:	e0d0      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b53c:	2308      	movs	r3, #8
 800b53e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b542:	e0cc      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b544:	2310      	movs	r3, #16
 800b546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b54a:	e0c8      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a5e      	ldr	r2, [pc, #376]	@ (800b6cc <UART_SetConfig+0x2ec>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d125      	bne.n	800b5a2 <UART_SetConfig+0x1c2>
 800b556:	4b5b      	ldr	r3, [pc, #364]	@ (800b6c4 <UART_SetConfig+0x2e4>)
 800b558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b55c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b560:	2b30      	cmp	r3, #48	@ 0x30
 800b562:	d016      	beq.n	800b592 <UART_SetConfig+0x1b2>
 800b564:	2b30      	cmp	r3, #48	@ 0x30
 800b566:	d818      	bhi.n	800b59a <UART_SetConfig+0x1ba>
 800b568:	2b20      	cmp	r3, #32
 800b56a:	d00a      	beq.n	800b582 <UART_SetConfig+0x1a2>
 800b56c:	2b20      	cmp	r3, #32
 800b56e:	d814      	bhi.n	800b59a <UART_SetConfig+0x1ba>
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <UART_SetConfig+0x19a>
 800b574:	2b10      	cmp	r3, #16
 800b576:	d008      	beq.n	800b58a <UART_SetConfig+0x1aa>
 800b578:	e00f      	b.n	800b59a <UART_SetConfig+0x1ba>
 800b57a:	2300      	movs	r3, #0
 800b57c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b580:	e0ad      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b582:	2302      	movs	r3, #2
 800b584:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b588:	e0a9      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b58a:	2304      	movs	r3, #4
 800b58c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b590:	e0a5      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b592:	2308      	movs	r3, #8
 800b594:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b598:	e0a1      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b59a:	2310      	movs	r3, #16
 800b59c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5a0:	e09d      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a4a      	ldr	r2, [pc, #296]	@ (800b6d0 <UART_SetConfig+0x2f0>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d125      	bne.n	800b5f8 <UART_SetConfig+0x218>
 800b5ac:	4b45      	ldr	r3, [pc, #276]	@ (800b6c4 <UART_SetConfig+0x2e4>)
 800b5ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b5b6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b5b8:	d016      	beq.n	800b5e8 <UART_SetConfig+0x208>
 800b5ba:	2bc0      	cmp	r3, #192	@ 0xc0
 800b5bc:	d818      	bhi.n	800b5f0 <UART_SetConfig+0x210>
 800b5be:	2b80      	cmp	r3, #128	@ 0x80
 800b5c0:	d00a      	beq.n	800b5d8 <UART_SetConfig+0x1f8>
 800b5c2:	2b80      	cmp	r3, #128	@ 0x80
 800b5c4:	d814      	bhi.n	800b5f0 <UART_SetConfig+0x210>
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d002      	beq.n	800b5d0 <UART_SetConfig+0x1f0>
 800b5ca:	2b40      	cmp	r3, #64	@ 0x40
 800b5cc:	d008      	beq.n	800b5e0 <UART_SetConfig+0x200>
 800b5ce:	e00f      	b.n	800b5f0 <UART_SetConfig+0x210>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5d6:	e082      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b5d8:	2302      	movs	r3, #2
 800b5da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5de:	e07e      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b5e0:	2304      	movs	r3, #4
 800b5e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5e6:	e07a      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b5e8:	2308      	movs	r3, #8
 800b5ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5ee:	e076      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b5f0:	2310      	movs	r3, #16
 800b5f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5f6:	e072      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a35      	ldr	r2, [pc, #212]	@ (800b6d4 <UART_SetConfig+0x2f4>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d12a      	bne.n	800b658 <UART_SetConfig+0x278>
 800b602:	4b30      	ldr	r3, [pc, #192]	@ (800b6c4 <UART_SetConfig+0x2e4>)
 800b604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b60c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b610:	d01a      	beq.n	800b648 <UART_SetConfig+0x268>
 800b612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b616:	d81b      	bhi.n	800b650 <UART_SetConfig+0x270>
 800b618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b61c:	d00c      	beq.n	800b638 <UART_SetConfig+0x258>
 800b61e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b622:	d815      	bhi.n	800b650 <UART_SetConfig+0x270>
 800b624:	2b00      	cmp	r3, #0
 800b626:	d003      	beq.n	800b630 <UART_SetConfig+0x250>
 800b628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b62c:	d008      	beq.n	800b640 <UART_SetConfig+0x260>
 800b62e:	e00f      	b.n	800b650 <UART_SetConfig+0x270>
 800b630:	2300      	movs	r3, #0
 800b632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b636:	e052      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b638:	2302      	movs	r3, #2
 800b63a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b63e:	e04e      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b640:	2304      	movs	r3, #4
 800b642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b646:	e04a      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b648:	2308      	movs	r3, #8
 800b64a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b64e:	e046      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b650:	2310      	movs	r3, #16
 800b652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b656:	e042      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a17      	ldr	r2, [pc, #92]	@ (800b6bc <UART_SetConfig+0x2dc>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d13a      	bne.n	800b6d8 <UART_SetConfig+0x2f8>
 800b662:	4b18      	ldr	r3, [pc, #96]	@ (800b6c4 <UART_SetConfig+0x2e4>)
 800b664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b668:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b66c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b670:	d01a      	beq.n	800b6a8 <UART_SetConfig+0x2c8>
 800b672:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b676:	d81b      	bhi.n	800b6b0 <UART_SetConfig+0x2d0>
 800b678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b67c:	d00c      	beq.n	800b698 <UART_SetConfig+0x2b8>
 800b67e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b682:	d815      	bhi.n	800b6b0 <UART_SetConfig+0x2d0>
 800b684:	2b00      	cmp	r3, #0
 800b686:	d003      	beq.n	800b690 <UART_SetConfig+0x2b0>
 800b688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b68c:	d008      	beq.n	800b6a0 <UART_SetConfig+0x2c0>
 800b68e:	e00f      	b.n	800b6b0 <UART_SetConfig+0x2d0>
 800b690:	2300      	movs	r3, #0
 800b692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b696:	e022      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b698:	2302      	movs	r3, #2
 800b69a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b69e:	e01e      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b6a0:	2304      	movs	r3, #4
 800b6a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6a6:	e01a      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b6a8:	2308      	movs	r3, #8
 800b6aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6ae:	e016      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b6b0:	2310      	movs	r3, #16
 800b6b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6b6:	e012      	b.n	800b6de <UART_SetConfig+0x2fe>
 800b6b8:	cfff69f3 	.word	0xcfff69f3
 800b6bc:	40008000 	.word	0x40008000
 800b6c0:	40013800 	.word	0x40013800
 800b6c4:	40021000 	.word	0x40021000
 800b6c8:	40004400 	.word	0x40004400
 800b6cc:	40004800 	.word	0x40004800
 800b6d0:	40004c00 	.word	0x40004c00
 800b6d4:	40005000 	.word	0x40005000
 800b6d8:	2310      	movs	r3, #16
 800b6da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4aae      	ldr	r2, [pc, #696]	@ (800b99c <UART_SetConfig+0x5bc>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	f040 8097 	bne.w	800b818 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b6ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b6ee:	2b08      	cmp	r3, #8
 800b6f0:	d823      	bhi.n	800b73a <UART_SetConfig+0x35a>
 800b6f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b6f8 <UART_SetConfig+0x318>)
 800b6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f8:	0800b71d 	.word	0x0800b71d
 800b6fc:	0800b73b 	.word	0x0800b73b
 800b700:	0800b725 	.word	0x0800b725
 800b704:	0800b73b 	.word	0x0800b73b
 800b708:	0800b72b 	.word	0x0800b72b
 800b70c:	0800b73b 	.word	0x0800b73b
 800b710:	0800b73b 	.word	0x0800b73b
 800b714:	0800b73b 	.word	0x0800b73b
 800b718:	0800b733 	.word	0x0800b733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b71c:	f7ff fa0c 	bl	800ab38 <HAL_RCC_GetPCLK1Freq>
 800b720:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b722:	e010      	b.n	800b746 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b724:	4b9e      	ldr	r3, [pc, #632]	@ (800b9a0 <UART_SetConfig+0x5c0>)
 800b726:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b728:	e00d      	b.n	800b746 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b72a:	f7ff f997 	bl	800aa5c <HAL_RCC_GetSysClockFreq>
 800b72e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b730:	e009      	b.n	800b746 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b736:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b738:	e005      	b.n	800b746 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b73a:	2300      	movs	r3, #0
 800b73c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b744:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b748:	2b00      	cmp	r3, #0
 800b74a:	f000 8130 	beq.w	800b9ae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b752:	4a94      	ldr	r2, [pc, #592]	@ (800b9a4 <UART_SetConfig+0x5c4>)
 800b754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b758:	461a      	mov	r2, r3
 800b75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b75c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b760:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	4613      	mov	r3, r2
 800b768:	005b      	lsls	r3, r3, #1
 800b76a:	4413      	add	r3, r2
 800b76c:	69ba      	ldr	r2, [r7, #24]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d305      	bcc.n	800b77e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b778:	69ba      	ldr	r2, [r7, #24]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d903      	bls.n	800b786 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b784:	e113      	b.n	800b9ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b788:	2200      	movs	r2, #0
 800b78a:	60bb      	str	r3, [r7, #8]
 800b78c:	60fa      	str	r2, [r7, #12]
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b792:	4a84      	ldr	r2, [pc, #528]	@ (800b9a4 <UART_SetConfig+0x5c4>)
 800b794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b798:	b29b      	uxth	r3, r3
 800b79a:	2200      	movs	r2, #0
 800b79c:	603b      	str	r3, [r7, #0]
 800b79e:	607a      	str	r2, [r7, #4]
 800b7a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b7a8:	f7fc fd36 	bl	8008218 <__aeabi_uldivmod>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4610      	mov	r0, r2
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	f04f 0200 	mov.w	r2, #0
 800b7b8:	f04f 0300 	mov.w	r3, #0
 800b7bc:	020b      	lsls	r3, r1, #8
 800b7be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b7c2:	0202      	lsls	r2, r0, #8
 800b7c4:	6979      	ldr	r1, [r7, #20]
 800b7c6:	6849      	ldr	r1, [r1, #4]
 800b7c8:	0849      	lsrs	r1, r1, #1
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	460c      	mov	r4, r1
 800b7ce:	4605      	mov	r5, r0
 800b7d0:	eb12 0804 	adds.w	r8, r2, r4
 800b7d4:	eb43 0905 	adc.w	r9, r3, r5
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	469a      	mov	sl, r3
 800b7e0:	4693      	mov	fp, r2
 800b7e2:	4652      	mov	r2, sl
 800b7e4:	465b      	mov	r3, fp
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	4649      	mov	r1, r9
 800b7ea:	f7fc fd15 	bl	8008218 <__aeabi_uldivmod>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7f6:	6a3b      	ldr	r3, [r7, #32]
 800b7f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7fc:	d308      	bcc.n	800b810 <UART_SetConfig+0x430>
 800b7fe:	6a3b      	ldr	r3, [r7, #32]
 800b800:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b804:	d204      	bcs.n	800b810 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	6a3a      	ldr	r2, [r7, #32]
 800b80c:	60da      	str	r2, [r3, #12]
 800b80e:	e0ce      	b.n	800b9ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b810:	2301      	movs	r3, #1
 800b812:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b816:	e0ca      	b.n	800b9ae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	69db      	ldr	r3, [r3, #28]
 800b81c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b820:	d166      	bne.n	800b8f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b822:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b826:	2b08      	cmp	r3, #8
 800b828:	d827      	bhi.n	800b87a <UART_SetConfig+0x49a>
 800b82a:	a201      	add	r2, pc, #4	@ (adr r2, 800b830 <UART_SetConfig+0x450>)
 800b82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b830:	0800b855 	.word	0x0800b855
 800b834:	0800b85d 	.word	0x0800b85d
 800b838:	0800b865 	.word	0x0800b865
 800b83c:	0800b87b 	.word	0x0800b87b
 800b840:	0800b86b 	.word	0x0800b86b
 800b844:	0800b87b 	.word	0x0800b87b
 800b848:	0800b87b 	.word	0x0800b87b
 800b84c:	0800b87b 	.word	0x0800b87b
 800b850:	0800b873 	.word	0x0800b873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b854:	f7ff f970 	bl	800ab38 <HAL_RCC_GetPCLK1Freq>
 800b858:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b85a:	e014      	b.n	800b886 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b85c:	f7ff f982 	bl	800ab64 <HAL_RCC_GetPCLK2Freq>
 800b860:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b862:	e010      	b.n	800b886 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b864:	4b4e      	ldr	r3, [pc, #312]	@ (800b9a0 <UART_SetConfig+0x5c0>)
 800b866:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b868:	e00d      	b.n	800b886 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b86a:	f7ff f8f7 	bl	800aa5c <HAL_RCC_GetSysClockFreq>
 800b86e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b870:	e009      	b.n	800b886 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b876:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b878:	e005      	b.n	800b886 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b87a:	2300      	movs	r3, #0
 800b87c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b884:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f000 8090 	beq.w	800b9ae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b892:	4a44      	ldr	r2, [pc, #272]	@ (800b9a4 <UART_SetConfig+0x5c4>)
 800b894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b898:	461a      	mov	r2, r3
 800b89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8a0:	005a      	lsls	r2, r3, #1
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	085b      	lsrs	r3, r3, #1
 800b8a8:	441a      	add	r2, r3
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8b4:	6a3b      	ldr	r3, [r7, #32]
 800b8b6:	2b0f      	cmp	r3, #15
 800b8b8:	d916      	bls.n	800b8e8 <UART_SetConfig+0x508>
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8c0:	d212      	bcs.n	800b8e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b8c2:	6a3b      	ldr	r3, [r7, #32]
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	f023 030f 	bic.w	r3, r3, #15
 800b8ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b8cc:	6a3b      	ldr	r3, [r7, #32]
 800b8ce:	085b      	lsrs	r3, r3, #1
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	f003 0307 	and.w	r3, r3, #7
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	8bfb      	ldrh	r3, [r7, #30]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	8bfa      	ldrh	r2, [r7, #30]
 800b8e4:	60da      	str	r2, [r3, #12]
 800b8e6:	e062      	b.n	800b9ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b8ee:	e05e      	b.n	800b9ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b8f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b8f4:	2b08      	cmp	r3, #8
 800b8f6:	d828      	bhi.n	800b94a <UART_SetConfig+0x56a>
 800b8f8:	a201      	add	r2, pc, #4	@ (adr r2, 800b900 <UART_SetConfig+0x520>)
 800b8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8fe:	bf00      	nop
 800b900:	0800b925 	.word	0x0800b925
 800b904:	0800b92d 	.word	0x0800b92d
 800b908:	0800b935 	.word	0x0800b935
 800b90c:	0800b94b 	.word	0x0800b94b
 800b910:	0800b93b 	.word	0x0800b93b
 800b914:	0800b94b 	.word	0x0800b94b
 800b918:	0800b94b 	.word	0x0800b94b
 800b91c:	0800b94b 	.word	0x0800b94b
 800b920:	0800b943 	.word	0x0800b943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b924:	f7ff f908 	bl	800ab38 <HAL_RCC_GetPCLK1Freq>
 800b928:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b92a:	e014      	b.n	800b956 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b92c:	f7ff f91a 	bl	800ab64 <HAL_RCC_GetPCLK2Freq>
 800b930:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b932:	e010      	b.n	800b956 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b934:	4b1a      	ldr	r3, [pc, #104]	@ (800b9a0 <UART_SetConfig+0x5c0>)
 800b936:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b938:	e00d      	b.n	800b956 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b93a:	f7ff f88f 	bl	800aa5c <HAL_RCC_GetSysClockFreq>
 800b93e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b940:	e009      	b.n	800b956 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b946:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b948:	e005      	b.n	800b956 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b94a:	2300      	movs	r3, #0
 800b94c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b954:	bf00      	nop
    }

    if (pclk != 0U)
 800b956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d028      	beq.n	800b9ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b960:	4a10      	ldr	r2, [pc, #64]	@ (800b9a4 <UART_SetConfig+0x5c4>)
 800b962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b966:	461a      	mov	r2, r3
 800b968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	085b      	lsrs	r3, r3, #1
 800b974:	441a      	add	r2, r3
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b97e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b980:	6a3b      	ldr	r3, [r7, #32]
 800b982:	2b0f      	cmp	r3, #15
 800b984:	d910      	bls.n	800b9a8 <UART_SetConfig+0x5c8>
 800b986:	6a3b      	ldr	r3, [r7, #32]
 800b988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b98c:	d20c      	bcs.n	800b9a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b98e:	6a3b      	ldr	r3, [r7, #32]
 800b990:	b29a      	uxth	r2, r3
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	60da      	str	r2, [r3, #12]
 800b998:	e009      	b.n	800b9ae <UART_SetConfig+0x5ce>
 800b99a:	bf00      	nop
 800b99c:	40008000 	.word	0x40008000
 800b9a0:	00f42400 	.word	0x00f42400
 800b9a4:	0800c0a4 	.word	0x0800c0a4
      }
      else
      {
        ret = HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b9ca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3730      	adds	r7, #48	@ 0x30
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b9d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9e4:	f003 0308 	and.w	r3, r3, #8
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00a      	beq.n	800ba02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	430a      	orrs	r2, r1
 800ba00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba06:	f003 0301 	and.w	r3, r3, #1
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00a      	beq.n	800ba24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	430a      	orrs	r2, r1
 800ba22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba28:	f003 0302 	and.w	r3, r3, #2
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00a      	beq.n	800ba46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	430a      	orrs	r2, r1
 800ba44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba4a:	f003 0304 	and.w	r3, r3, #4
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00a      	beq.n	800ba68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	430a      	orrs	r2, r1
 800ba66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba6c:	f003 0310 	and.w	r3, r3, #16
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00a      	beq.n	800ba8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	430a      	orrs	r2, r1
 800ba88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba8e:	f003 0320 	and.w	r3, r3, #32
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00a      	beq.n	800baac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	430a      	orrs	r2, r1
 800baaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d01a      	beq.n	800baee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	430a      	orrs	r2, r1
 800bacc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bad6:	d10a      	bne.n	800baee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	430a      	orrs	r2, r1
 800baec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00a      	beq.n	800bb10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	430a      	orrs	r2, r1
 800bb0e:	605a      	str	r2, [r3, #4]
  }
}
 800bb10:	bf00      	nop
 800bb12:	370c      	adds	r7, #12
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b098      	sub	sp, #96	@ 0x60
 800bb20:	af02      	add	r7, sp, #8
 800bb22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb2c:	f7fd fb1e 	bl	800916c <HAL_GetTick>
 800bb30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0308 	and.w	r3, r3, #8
 800bb3c:	2b08      	cmp	r3, #8
 800bb3e:	d12f      	bne.n	800bba0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f88e 	bl	800bc70 <UART_WaitOnFlagUntilTimeout>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d022      	beq.n	800bba0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb62:	e853 3f00 	ldrex	r3, [r3]
 800bb66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bb68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb6e:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	461a      	mov	r2, r3
 800bb76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb78:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb80:	e841 2300 	strex	r3, r2, [r1]
 800bb84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1e6      	bne.n	800bb5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2220      	movs	r2, #32
 800bb90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2200      	movs	r2, #0
 800bb98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb9c:	2303      	movs	r3, #3
 800bb9e:	e063      	b.n	800bc68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f003 0304 	and.w	r3, r3, #4
 800bbaa:	2b04      	cmp	r3, #4
 800bbac:	d149      	bne.n	800bc42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 f857 	bl	800bc70 <UART_WaitOnFlagUntilTimeout>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d03c      	beq.n	800bc42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd0:	e853 3f00 	ldrex	r3, [r3]
 800bbd4:	623b      	str	r3, [r7, #32]
   return(result);
 800bbd6:	6a3b      	ldr	r3, [r7, #32]
 800bbd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bbdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbe6:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbe8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbee:	e841 2300 	strex	r3, r2, [r1]
 800bbf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1e6      	bne.n	800bbc8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	3308      	adds	r3, #8
 800bc00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	e853 3f00 	ldrex	r3, [r3]
 800bc08:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f023 0301 	bic.w	r3, r3, #1
 800bc10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3308      	adds	r3, #8
 800bc18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc1a:	61fa      	str	r2, [r7, #28]
 800bc1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1e:	69b9      	ldr	r1, [r7, #24]
 800bc20:	69fa      	ldr	r2, [r7, #28]
 800bc22:	e841 2300 	strex	r3, r2, [r1]
 800bc26:	617b      	str	r3, [r7, #20]
   return(result);
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1e5      	bne.n	800bbfa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2220      	movs	r2, #32
 800bc32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	e012      	b.n	800bc68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2220      	movs	r2, #32
 800bc46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2220      	movs	r2, #32
 800bc4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2200      	movs	r2, #0
 800bc56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc66:	2300      	movs	r3, #0
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3758      	adds	r7, #88	@ 0x58
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	603b      	str	r3, [r7, #0]
 800bc7c:	4613      	mov	r3, r2
 800bc7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc80:	e04f      	b.n	800bd22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc88:	d04b      	beq.n	800bd22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc8a:	f7fd fa6f 	bl	800916c <HAL_GetTick>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	69ba      	ldr	r2, [r7, #24]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d302      	bcc.n	800bca0 <UART_WaitOnFlagUntilTimeout+0x30>
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d101      	bne.n	800bca4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bca0:	2303      	movs	r3, #3
 800bca2:	e04e      	b.n	800bd42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f003 0304 	and.w	r3, r3, #4
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d037      	beq.n	800bd22 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	2b80      	cmp	r3, #128	@ 0x80
 800bcb6:	d034      	beq.n	800bd22 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	2b40      	cmp	r3, #64	@ 0x40
 800bcbc:	d031      	beq.n	800bd22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	69db      	ldr	r3, [r3, #28]
 800bcc4:	f003 0308 	and.w	r3, r3, #8
 800bcc8:	2b08      	cmp	r3, #8
 800bcca:	d110      	bne.n	800bcee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2208      	movs	r2, #8
 800bcd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bcd4:	68f8      	ldr	r0, [r7, #12]
 800bcd6:	f000 f838 	bl	800bd4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2208      	movs	r2, #8
 800bcde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	e029      	b.n	800bd42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	69db      	ldr	r3, [r3, #28]
 800bcf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bcf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bcfc:	d111      	bne.n	800bd22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f000 f81e 	bl	800bd4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2220      	movs	r2, #32
 800bd12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bd1e:	2303      	movs	r3, #3
 800bd20:	e00f      	b.n	800bd42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	69da      	ldr	r2, [r3, #28]
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	4013      	ands	r3, r2
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	bf0c      	ite	eq
 800bd32:	2301      	moveq	r3, #1
 800bd34:	2300      	movne	r3, #0
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	461a      	mov	r2, r3
 800bd3a:	79fb      	ldrb	r3, [r7, #7]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d0a0      	beq.n	800bc82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd4a:	b480      	push	{r7}
 800bd4c:	b095      	sub	sp, #84	@ 0x54
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd5a:	e853 3f00 	ldrex	r3, [r3]
 800bd5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bd60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd70:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd72:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bd76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd78:	e841 2300 	strex	r3, r2, [r1]
 800bd7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bd7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1e6      	bne.n	800bd52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	3308      	adds	r3, #8
 800bd8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8c:	6a3b      	ldr	r3, [r7, #32]
 800bd8e:	e853 3f00 	ldrex	r3, [r3]
 800bd92:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bd9a:	f023 0301 	bic.w	r3, r3, #1
 800bd9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	3308      	adds	r3, #8
 800bda6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bda8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bdaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bdae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdb0:	e841 2300 	strex	r3, r2, [r1]
 800bdb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bdb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1e3      	bne.n	800bd84 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d118      	bne.n	800bdf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	e853 3f00 	ldrex	r3, [r3]
 800bdd0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	f023 0310 	bic.w	r3, r3, #16
 800bdd8:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	461a      	mov	r2, r3
 800bde0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bde2:	61bb      	str	r3, [r7, #24]
 800bde4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde6:	6979      	ldr	r1, [r7, #20]
 800bde8:	69ba      	ldr	r2, [r7, #24]
 800bdea:	e841 2300 	strex	r3, r2, [r1]
 800bdee:	613b      	str	r3, [r7, #16]
   return(result);
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d1e6      	bne.n	800bdc4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2220      	movs	r2, #32
 800bdfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800be0a:	bf00      	nop
 800be0c:	3754      	adds	r7, #84	@ 0x54
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr

0800be16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be16:	b480      	push	{r7}
 800be18:	b085      	sub	sp, #20
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800be24:	2b01      	cmp	r3, #1
 800be26:	d101      	bne.n	800be2c <HAL_UARTEx_DisableFifoMode+0x16>
 800be28:	2302      	movs	r3, #2
 800be2a:	e027      	b.n	800be7c <HAL_UARTEx_DisableFifoMode+0x66>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2201      	movs	r2, #1
 800be30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2224      	movs	r2, #36	@ 0x24
 800be38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f022 0201 	bic.w	r2, r2, #1
 800be52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800be5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	68fa      	ldr	r2, [r7, #12]
 800be68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2220      	movs	r2, #32
 800be6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3714      	adds	r7, #20
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d101      	bne.n	800bea0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be9c:	2302      	movs	r3, #2
 800be9e:	e02d      	b.n	800befc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2201      	movs	r2, #1
 800bea4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2224      	movs	r2, #36	@ 0x24
 800beac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f022 0201 	bic.w	r2, r2, #1
 800bec6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	683a      	ldr	r2, [r7, #0]
 800bed8:	430a      	orrs	r2, r1
 800beda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 f84f 	bl	800bf80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2220      	movs	r2, #32
 800beee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d101      	bne.n	800bf1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf18:	2302      	movs	r3, #2
 800bf1a:	e02d      	b.n	800bf78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2224      	movs	r2, #36	@ 0x24
 800bf28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f022 0201 	bic.w	r2, r2, #1
 800bf42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	683a      	ldr	r2, [r7, #0]
 800bf54:	430a      	orrs	r2, r1
 800bf56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 f811 	bl	800bf80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	68fa      	ldr	r2, [r7, #12]
 800bf64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2220      	movs	r2, #32
 800bf6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b085      	sub	sp, #20
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d108      	bne.n	800bfa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bfa0:	e031      	b.n	800c006 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bfa2:	2308      	movs	r3, #8
 800bfa4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bfa6:	2308      	movs	r3, #8
 800bfa8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	0e5b      	lsrs	r3, r3, #25
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	f003 0307 	and.w	r3, r3, #7
 800bfb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	0f5b      	lsrs	r3, r3, #29
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	f003 0307 	and.w	r3, r3, #7
 800bfc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfca:	7bbb      	ldrb	r3, [r7, #14]
 800bfcc:	7b3a      	ldrb	r2, [r7, #12]
 800bfce:	4911      	ldr	r1, [pc, #68]	@ (800c014 <UARTEx_SetNbDataToProcess+0x94>)
 800bfd0:	5c8a      	ldrb	r2, [r1, r2]
 800bfd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bfd6:	7b3a      	ldrb	r2, [r7, #12]
 800bfd8:	490f      	ldr	r1, [pc, #60]	@ (800c018 <UARTEx_SetNbDataToProcess+0x98>)
 800bfda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfdc:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bfe8:	7bfb      	ldrb	r3, [r7, #15]
 800bfea:	7b7a      	ldrb	r2, [r7, #13]
 800bfec:	4909      	ldr	r1, [pc, #36]	@ (800c014 <UARTEx_SetNbDataToProcess+0x94>)
 800bfee:	5c8a      	ldrb	r2, [r1, r2]
 800bff0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bff4:	7b7a      	ldrb	r2, [r7, #13]
 800bff6:	4908      	ldr	r1, [pc, #32]	@ (800c018 <UARTEx_SetNbDataToProcess+0x98>)
 800bff8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bffa:	fb93 f3f2 	sdiv	r3, r3, r2
 800bffe:	b29a      	uxth	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c006:	bf00      	nop
 800c008:	3714      	adds	r7, #20
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	0800c0bc 	.word	0x0800c0bc
 800c018:	0800c0c4 	.word	0x0800c0c4

0800c01c <memset>:
 800c01c:	4402      	add	r2, r0
 800c01e:	4603      	mov	r3, r0
 800c020:	4293      	cmp	r3, r2
 800c022:	d100      	bne.n	800c026 <memset+0xa>
 800c024:	4770      	bx	lr
 800c026:	f803 1b01 	strb.w	r1, [r3], #1
 800c02a:	e7f9      	b.n	800c020 <memset+0x4>

0800c02c <__libc_init_array>:
 800c02c:	b570      	push	{r4, r5, r6, lr}
 800c02e:	4d0d      	ldr	r5, [pc, #52]	@ (800c064 <__libc_init_array+0x38>)
 800c030:	4c0d      	ldr	r4, [pc, #52]	@ (800c068 <__libc_init_array+0x3c>)
 800c032:	1b64      	subs	r4, r4, r5
 800c034:	10a4      	asrs	r4, r4, #2
 800c036:	2600      	movs	r6, #0
 800c038:	42a6      	cmp	r6, r4
 800c03a:	d109      	bne.n	800c050 <__libc_init_array+0x24>
 800c03c:	4d0b      	ldr	r5, [pc, #44]	@ (800c06c <__libc_init_array+0x40>)
 800c03e:	4c0c      	ldr	r4, [pc, #48]	@ (800c070 <__libc_init_array+0x44>)
 800c040:	f000 f818 	bl	800c074 <_init>
 800c044:	1b64      	subs	r4, r4, r5
 800c046:	10a4      	asrs	r4, r4, #2
 800c048:	2600      	movs	r6, #0
 800c04a:	42a6      	cmp	r6, r4
 800c04c:	d105      	bne.n	800c05a <__libc_init_array+0x2e>
 800c04e:	bd70      	pop	{r4, r5, r6, pc}
 800c050:	f855 3b04 	ldr.w	r3, [r5], #4
 800c054:	4798      	blx	r3
 800c056:	3601      	adds	r6, #1
 800c058:	e7ee      	b.n	800c038 <__libc_init_array+0xc>
 800c05a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c05e:	4798      	blx	r3
 800c060:	3601      	adds	r6, #1
 800c062:	e7f2      	b.n	800c04a <__libc_init_array+0x1e>
 800c064:	0800c0d4 	.word	0x0800c0d4
 800c068:	0800c0d4 	.word	0x0800c0d4
 800c06c:	0800c0d4 	.word	0x0800c0d4
 800c070:	0800c0d8 	.word	0x0800c0d8

0800c074 <_init>:
 800c074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c076:	bf00      	nop
 800c078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c07a:	bc08      	pop	{r3}
 800c07c:	469e      	mov	lr, r3
 800c07e:	4770      	bx	lr

0800c080 <_fini>:
 800c080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c082:	bf00      	nop
 800c084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c086:	bc08      	pop	{r3}
 800c088:	469e      	mov	lr, r3
 800c08a:	4770      	bx	lr
